
LEDMatrix16x32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  000012a6  0000133a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e3  00800188  00800188  000013c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002594  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010cd  00000000  00000000  00003bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000121c  00000000  00000000  00004c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c4  00000000  00000000  00005e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e5  00000000  00000000  00006460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ba5  00000000  00000000  00006d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  000088ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c1       	rjmp	.+650    	; 0x28c <__ctors_end>
       2:	00 00       	nop
       4:	60 c1       	rjmp	.+704    	; 0x2c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c1       	rjmp	.+700    	; 0x2c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c1       	rjmp	.+696    	; 0x2c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c1       	rjmp	.+692    	; 0x2c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c1       	rjmp	.+688    	; 0x2c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c1       	rjmp	.+684    	; 0x2c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c1       	rjmp	.+680    	; 0x2c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c1       	rjmp	.+676    	; 0x2c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	25 c2       	rjmp	.+1098   	; 0x470 <__vector_9>
      26:	00 00       	nop
      28:	fc c1       	rjmp	.+1016   	; 0x422 <__vector_10>
      2a:	00 00       	nop
      2c:	4c c1       	rjmp	.+664    	; 0x2c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c1       	rjmp	.+660    	; 0x2c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c1       	rjmp	.+656    	; 0x2c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c1       	rjmp	.+652    	; 0x2c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c1       	rjmp	.+648    	; 0x2c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c9 c1       	rjmp	.+914    	; 0x3d4 <__vector_16>
      42:	00 00       	nop
      44:	40 c1       	rjmp	.+640    	; 0x2c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c1       	rjmp	.+636    	; 0x2c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c1       	rjmp	.+632    	; 0x2c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c1       	rjmp	.+628    	; 0x2c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c1       	rjmp	.+624    	; 0x2c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c1       	rjmp	.+620    	; 0x2c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c1       	rjmp	.+616    	; 0x2c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c1       	rjmp	.+612    	; 0x2c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c1       	rjmp	.+608    	; 0x2c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c1       	rjmp	.+604    	; 0x2c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c1       	rjmp	.+600    	; 0x2c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c1       	rjmp	.+596    	; 0x2c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c1       	rjmp	.+592    	; 0x2c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c1       	rjmp	.+588    	; 0x2c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c1       	rjmp	.+584    	; 0x2c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c1       	rjmp	.+580    	; 0x2c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c1       	rjmp	.+576    	; 0x2c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c1       	rjmp	.+572    	; 0x2c6 <__bad_interrupt>
	...

0000008c <STANDBY_IMAGE>:
	...
      a4:	38 38 01 19 19 18 00 07 00 00 00 01 18 00 00 07     88..............
      b4:	38 38 00 01 18 00 00 07 00 00 00 01 18 00 00 07     88..............
      c4:	38 38 00 01 18 00 00 07 00 00 00 00 00 00 00 00     88..............
      d4:	30 30 02 2a 2a 28 00 06 30 00 02 28 00 02 00 00     00.**(..0..(....
      e4:	30 00 02 2a 2a 28 00 00 30 00 02 00 02 28 00 00     0..**(..0....(..
      f4:	30 30 02 28 28 2a 00 06 00 00 00 00 00 00 00 00     00.((*..........
	...
     134:	00 00 10 00 00 00 00 30 00 00 10 11 39 00 00 30     .......0....9..0
     144:	03 23 20 17 39 39 38 35 2b 23 28 2f 2f 0f 0d 35     .# .9985+#(//..5
     154:	0c 26 16 2e 26 22 0a 09 0c 0c 14 15 22 3a 3b 3b     .&..&"......":;;
     164:	29 29 29 15 25 39 1b 1b 3b 2b 21 25 09 11 1f 1f     ))).%9..;+!%....
     174:	1b 1b 27 0a 09 15 17 24 1f 1f 27 0a 1a 1d 15 24     ..'....$..'....$
     184:	36 36 36 36 1a 1d 24 24                             6666..$$

0000018c <GAMEOVER_IMAGE>:
     18c:	3f 3f 3f 3f 3f 3f 3f 3f 3f 09 39 09 3f 0f 09 0f     ?????????.9.?...
     19c:	3f 09 0f 0f 3f 09 3f 39 3f 09 3f 09 3f 09 0f 09     ?...?.?9?.?.?...
     1ac:	3f 09 3f 09 3f 09 39 39 3f 09 39 09 3f 09 0f 09     ?.?.?.99?.9.?...
     1bc:	3f 3f 3f 3f 3f 3f 3f 3f 0f 09 0f 3f 09 0f 09 3f     ????????...?...?
     1cc:	09 3f 39 3f 09 3f 39 0f 09 0f 09 3f 09 0f 09 3f     .?9?.?9....?...?
     1dc:	09 3f 39 3f 09 3f 09 3f 0f 09 0f 3f 0f 39 3f 0f     .?9?.?.?...?.9?.
     1ec:	3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 00 00 00 00 00     ????????........
	...

0000028c <__ctors_end>:
     28c:	11 24       	eor	r1, r1
     28e:	1f be       	out	0x3f, r1	; 63
     290:	cf ef       	ldi	r28, 0xFF	; 255
     292:	d0 e1       	ldi	r29, 0x10	; 16
     294:	de bf       	out	0x3e, r29	; 62
     296:	cd bf       	out	0x3d, r28	; 61

00000298 <__do_copy_data>:
     298:	11 e0       	ldi	r17, 0x01	; 1
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	e6 ea       	ldi	r30, 0xA6	; 166
     2a0:	f2 e1       	ldi	r31, 0x12	; 18
     2a2:	00 e0       	ldi	r16, 0x00	; 0
     2a4:	0b bf       	out	0x3b, r16	; 59
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__do_copy_data+0x14>
     2a8:	07 90       	elpm	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	a8 38       	cpi	r26, 0x88	; 136
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <__do_copy_data+0x10>

000002b2 <__do_clear_bss>:
     2b2:	24 e0       	ldi	r18, 0x04	; 4
     2b4:	a8 e8       	ldi	r26, 0x88	; 136
     2b6:	b1 e0       	ldi	r27, 0x01	; 1
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	ab 36       	cpi	r26, 0x6B	; 107
     2be:	b2 07       	cpc	r27, r18
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
     2c2:	05 d3       	rcall	.+1546   	; 0x8ce <main>
     2c4:	ee c7       	rjmp	.+4060   	; 0x12a2 <_exit>

000002c6 <__bad_interrupt>:
     2c6:	9c ce       	rjmp	.-712    	; 0x0 <__vectors>

000002c8 <DMAT_draw_square_fill>:
{
	__DMAT_draw_rect_fill(r, c, h, w, rgb);
}

void DMAT_draw_square_fill(coord_t r, coord_t c, coord_t side_size, u8 rgb)
{
     2c8:	ef 92       	push	r14
     2ca:	ff 92       	push	r15
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	d8 2f       	mov	r29, r24
     2d6:	f6 2e       	mov	r15, r22
     2d8:	02 2f       	mov	r16, r18
	0x7B6F, 0x2492, 0x73E7, 0x79E7, 0x49ED, 0x79CF, 0x7BCF, 0x492F, 0x7BEF, 0x79EF
};// 1 우측정렬: 0x4924, 1 중앙 정렬: 0x2492

static inline void __DMAT_draw_rect_fill(coord_t r, coord_t c, coord_t h, coord_t w, u8 rgb)
{
	h += r;
     2da:	e8 2e       	mov	r14, r24
     2dc:	e4 0e       	add	r14, r20
	w += c;
     2de:	16 2f       	mov	r17, r22
     2e0:	14 0f       	add	r17, r20
     2e2:	0b c0       	rjmp	.+22     	; 0x2fa <DMAT_draw_square_fill+0x32>
		LEDMAT_swap_buffer();
		while (1);
	}
#endif
	
	LEDMAT_set_rgb_bit((LEDMAT_ROW - 1) - col, row, rgb);
     2e4:	40 2f       	mov	r20, r16
     2e6:	6d 2f       	mov	r22, r29
     2e8:	8f e0       	ldi	r24, 0x0F	; 15
     2ea:	8c 1b       	sub	r24, r28
     2ec:	0e d1       	rcall	.+540    	; 0x50a <LEDMAT_set_rgb_bit>
	
	coord_t col = c;

	for (;r < h; r++)
	for (c = col;c < w; c++)
     2ee:	cf 5f       	subi	r28, 0xFF	; 255
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <DMAT_draw_square_fill+0x2c>
	h += r;
	w += c;
	
	coord_t col = c;

	for (;r < h; r++)
     2f2:	cf 2d       	mov	r28, r15
	for (c = col;c < w; c++)
     2f4:	c1 17       	cp	r28, r17
     2f6:	b0 f3       	brcs	.-20     	; 0x2e4 <DMAT_draw_square_fill+0x1c>
	h += r;
	w += c;
	
	coord_t col = c;

	for (;r < h; r++)
     2f8:	df 5f       	subi	r29, 0xFF	; 255
     2fa:	de 15       	cp	r29, r14
     2fc:	d0 f3       	brcs	.-12     	; 0x2f2 <DMAT_draw_square_fill+0x2a>
}

void DMAT_draw_square_fill(coord_t r, coord_t c, coord_t side_size, u8 rgb)
{
	__DMAT_draw_rect_fill(r, c, side_size, side_size, rgb);
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	08 95       	ret

0000030c <DMAT_draw_digit_bit>:

void DMAT_draw_digit_bit(coord_t row, coord_t col, u8 n, u8 rgb, coord_t scale)
{
     30c:	cf 92       	push	r12
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	c8 2e       	mov	r12, r24
     31e:	d6 2e       	mov	r13, r22
     320:	12 2f       	mov	r17, r18
	u16 digit = DIGITS[n];
     322:	e4 2f       	mov	r30, r20
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	ee 0f       	add	r30, r30
     328:	ff 1f       	adc	r31, r31
     32a:	ec 5f       	subi	r30, 0xFC	; 252
     32c:	fe 4f       	sbci	r31, 0xFE	; 254
     32e:	e0 80       	ld	r14, Z
     330:	f1 80       	ldd	r15, Z+1	; 0x01

	for (coord_t r = 0; r < DMAT_DIGIT_RATIO_H; r++)
     332:	d0 e0       	ldi	r29, 0x00	; 0
     334:	15 c0       	rjmp	.+42     	; 0x360 <DMAT_draw_digit_bit+0x54>
	for (coord_t c = 0; c < DMAT_DIGIT_RATIO_W; c++) {
		if (digit & 1)  DMAT_draw_square_fill(r * scale + row, c * scale + col, scale, rgb);
     336:	e0 fe       	sbrs	r14, 0
     338:	0b c0       	rjmp	.+22     	; 0x350 <DMAT_draw_digit_bit+0x44>
     33a:	21 2f       	mov	r18, r17
     33c:	40 2f       	mov	r20, r16
     33e:	6d 2d       	mov	r22, r13
     340:	c0 9f       	mul	r28, r16
     342:	60 0d       	add	r22, r0
     344:	11 24       	eor	r1, r1
     346:	8c 2d       	mov	r24, r12
     348:	d0 9f       	mul	r29, r16
     34a:	80 0d       	add	r24, r0
     34c:	11 24       	eor	r1, r1
     34e:	bc df       	rcall	.-136    	; 0x2c8 <DMAT_draw_square_fill>
		digit >>= 1;
     350:	f6 94       	lsr	r15
     352:	e7 94       	ror	r14
void DMAT_draw_digit_bit(coord_t row, coord_t col, u8 n, u8 rgb, coord_t scale)
{
	u16 digit = DIGITS[n];

	for (coord_t r = 0; r < DMAT_DIGIT_RATIO_H; r++)
	for (coord_t c = 0; c < DMAT_DIGIT_RATIO_W; c++) {
     354:	cf 5f       	subi	r28, 0xFF	; 255
     356:	01 c0       	rjmp	.+2      	; 0x35a <DMAT_draw_digit_bit+0x4e>
     358:	c0 e0       	ldi	r28, 0x00	; 0
     35a:	c3 30       	cpi	r28, 0x03	; 3
     35c:	60 f3       	brcs	.-40     	; 0x336 <DMAT_draw_digit_bit+0x2a>

void DMAT_draw_digit_bit(coord_t row, coord_t col, u8 n, u8 rgb, coord_t scale)
{
	u16 digit = DIGITS[n];

	for (coord_t r = 0; r < DMAT_DIGIT_RATIO_H; r++)
     35e:	df 5f       	subi	r29, 0xFF	; 255
     360:	d5 30       	cpi	r29, 0x05	; 5
     362:	d0 f3       	brcs	.-12     	; 0x358 <DMAT_draw_digit_bit+0x4c>
	for (coord_t c = 0; c < DMAT_DIGIT_RATIO_W; c++) {
		if (digit & 1)  DMAT_draw_square_fill(r * scale + row, c * scale + col, scale, rgb);
		digit >>= 1;
	}
}
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	08 95       	ret

00000376 <DMAT_draw_screen_from_pgm>:

#ifdef DISPLAY_MATRIX_PGM_ENABLE
#include <avr/pgmspace.h>

void DMAT_draw_screen_from_pgm(const u8* addr)
{
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	fc 01       	movw	r30, r24
	for (coord_t r = 0; r < DMAT_ROW; r++)
     384:	00 e0       	ldi	r16, 0x00	; 0
     386:	1d c0       	rjmp	.+58     	; 0x3c2 <DMAT_draw_screen_from_pgm+0x4c>
	for (coord_t c = 0; c < DMAT_COL / 2; c++) {
		u8 rgb = pgm_read_byte(addr++);
     388:	7f 01       	movw	r14, r30
     38a:	8f ef       	ldi	r24, 0xFF	; 255
     38c:	e8 1a       	sub	r14, r24
     38e:	f8 0a       	sbc	r15, r24
     390:	c4 91       	lpm	r28, Z
		DMAT_set_rgb_bit(r, c, rgb & 7);
     392:	4c 2f       	mov	r20, r28
     394:	47 70       	andi	r20, 0x07	; 7
     396:	1f e0       	ldi	r17, 0x0F	; 15
     398:	60 2f       	mov	r22, r16
     39a:	81 2f       	mov	r24, r17
     39c:	8d 1b       	sub	r24, r29
     39e:	b5 d0       	rcall	.+362    	; 0x50a <LEDMAT_set_rgb_bit>
		DMAT_set_rgb_bit(r, c + DMAT_COL / 2, rgb >> 3);
     3a0:	4c 2f       	mov	r20, r28
     3a2:	46 95       	lsr	r20
     3a4:	46 95       	lsr	r20
     3a6:	46 95       	lsr	r20
     3a8:	88 e0       	ldi	r24, 0x08	; 8
     3aa:	8d 0f       	add	r24, r29
     3ac:	60 2f       	mov	r22, r16
     3ae:	18 1b       	sub	r17, r24
     3b0:	81 2f       	mov	r24, r17
     3b2:	ab d0       	rcall	.+342    	; 0x50a <LEDMAT_set_rgb_bit>
#include <avr/pgmspace.h>

void DMAT_draw_screen_from_pgm(const u8* addr)
{
	for (coord_t r = 0; r < DMAT_ROW; r++)
	for (coord_t c = 0; c < DMAT_COL / 2; c++) {
     3b4:	df 5f       	subi	r29, 0xFF	; 255
		u8 rgb = pgm_read_byte(addr++);
     3b6:	f7 01       	movw	r30, r14
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <DMAT_draw_screen_from_pgm+0x46>
     3ba:	d0 e0       	ldi	r29, 0x00	; 0
#include <avr/pgmspace.h>

void DMAT_draw_screen_from_pgm(const u8* addr)
{
	for (coord_t r = 0; r < DMAT_ROW; r++)
	for (coord_t c = 0; c < DMAT_COL / 2; c++) {
     3bc:	d8 30       	cpi	r29, 0x08	; 8
     3be:	20 f3       	brcs	.-56     	; 0x388 <DMAT_draw_screen_from_pgm+0x12>
#ifdef DISPLAY_MATRIX_PGM_ENABLE
#include <avr/pgmspace.h>

void DMAT_draw_screen_from_pgm(const u8* addr)
{
	for (coord_t r = 0; r < DMAT_ROW; r++)
     3c0:	0f 5f       	subi	r16, 0xFF	; 255
     3c2:	00 32       	cpi	r16, 0x20	; 32
     3c4:	d0 f3       	brcs	.-12     	; 0x3ba <DMAT_draw_screen_from_pgm+0x44>
	for (coord_t c = 0; c < DMAT_COL / 2; c++) {
		u8 rgb = pgm_read_byte(addr++);
		DMAT_set_rgb_bit(r, c, rgb & 7);
		DMAT_set_rgb_bit(r, c + DMAT_COL / 2, rgb >> 3);
	}
}
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	ff 90       	pop	r15
     3d0:	ef 90       	pop	r14
     3d2:	08 95       	ret

000003d4 <__vector_16>:
#include "shortint.h"
#include "led_matrix_16x32.h"
#include "timer.h"

ISR(TIMER0_OVF_vect)
{
     3d4:	1f 92       	push	r1
     3d6:	0f 92       	push	r0
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	0f 92       	push	r0
     3dc:	11 24       	eor	r1, r1
     3de:	0b b6       	in	r0, 0x3b	; 59
     3e0:	0f 92       	push	r0
     3e2:	2f 93       	push	r18
     3e4:	3f 93       	push	r19
     3e6:	4f 93       	push	r20
     3e8:	5f 93       	push	r21
     3ea:	6f 93       	push	r22
     3ec:	7f 93       	push	r23
     3ee:	8f 93       	push	r24
     3f0:	9f 93       	push	r25
     3f2:	af 93       	push	r26
     3f4:	bf 93       	push	r27
     3f6:	ef 93       	push	r30
     3f8:	ff 93       	push	r31
	TimeBase_inc_tick();
     3fa:	2b d6       	rcall	.+3158   	; 0x1052 <TimeBase_inc_tick>
}
     3fc:	ff 91       	pop	r31
     3fe:	ef 91       	pop	r30
     400:	bf 91       	pop	r27
     402:	af 91       	pop	r26
     404:	9f 91       	pop	r25
     406:	8f 91       	pop	r24
     408:	7f 91       	pop	r23
     40a:	6f 91       	pop	r22
     40c:	5f 91       	pop	r21
     40e:	4f 91       	pop	r20
     410:	3f 91       	pop	r19
     412:	2f 91       	pop	r18
     414:	0f 90       	pop	r0
     416:	0b be       	out	0x3b, r0	; 59
     418:	0f 90       	pop	r0
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	0f 90       	pop	r0
     41e:	1f 90       	pop	r1
     420:	18 95       	reti

00000422 <__vector_10>:

/* LED matrix refresh */
ISR(TIMER2_OVF_vect)
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	0b b6       	in	r0, 0x3b	; 59
     42e:	0f 92       	push	r0
     430:	2f 93       	push	r18
     432:	3f 93       	push	r19
     434:	4f 93       	push	r20
     436:	5f 93       	push	r21
     438:	6f 93       	push	r22
     43a:	7f 93       	push	r23
     43c:	8f 93       	push	r24
     43e:	9f 93       	push	r25
     440:	af 93       	push	r26
     442:	bf 93       	push	r27
     444:	ef 93       	push	r30
     446:	ff 93       	push	r31
	LEDMAT_refresh();
     448:	b8 d0       	rcall	.+368    	; 0x5ba <LEDMAT_refresh>
}
     44a:	ff 91       	pop	r31
     44c:	ef 91       	pop	r30
     44e:	bf 91       	pop	r27
     450:	af 91       	pop	r26
     452:	9f 91       	pop	r25
     454:	8f 91       	pop	r24
     456:	7f 91       	pop	r23
     458:	6f 91       	pop	r22
     45a:	5f 91       	pop	r21
     45c:	4f 91       	pop	r20
     45e:	3f 91       	pop	r19
     460:	2f 91       	pop	r18
     462:	0f 90       	pop	r0
     464:	0b be       	out	0x3b, r0	; 59
     466:	0f 90       	pop	r0
     468:	0f be       	out	0x3f, r0	; 63
     46a:	0f 90       	pop	r0
     46c:	1f 90       	pop	r1
     46e:	18 95       	reti

00000470 <__vector_9>:

/* brightness control */
ISR(TIMER2_COMP_vect)
{
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	0f 92       	push	r0
     478:	11 24       	eor	r1, r1
     47a:	0b b6       	in	r0, 0x3b	; 59
     47c:	0f 92       	push	r0
     47e:	2f 93       	push	r18
     480:	3f 93       	push	r19
     482:	4f 93       	push	r20
     484:	5f 93       	push	r21
     486:	6f 93       	push	r22
     488:	7f 93       	push	r23
     48a:	8f 93       	push	r24
     48c:	9f 93       	push	r25
     48e:	af 93       	push	r26
     490:	bf 93       	push	r27
     492:	ef 93       	push	r30
     494:	ff 93       	push	r31
	LEDMAT_OE_disable();
     496:	d4 d0       	rcall	.+424    	; 0x640 <LEDMAT_OE_disable>
     498:	ff 91       	pop	r31
     49a:	ef 91       	pop	r30
     49c:	bf 91       	pop	r27
     49e:	af 91       	pop	r26
     4a0:	9f 91       	pop	r25
     4a2:	8f 91       	pop	r24
     4a4:	7f 91       	pop	r23
     4a6:	6f 91       	pop	r22
     4a8:	5f 91       	pop	r21
     4aa:	4f 91       	pop	r20
     4ac:	3f 91       	pop	r19
     4ae:	2f 91       	pop	r18
     4b0:	0f 90       	pop	r0
     4b2:	0b be       	out	0x3b, r0	; 59
     4b4:	0f 90       	pop	r0
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	0f 90       	pop	r0
     4ba:	1f 90       	pop	r1
     4bc:	18 95       	reti

000004be <LEDMAT_init>:
u8 LEDMAT_get_rgb_bit(u8 r, u8 c)
{
	return r < 8 ?
	LEDMAT_BACK_BUF[r][c] & LEDMAT_RGB1:
	LEDMAT_BACK_BUF[r & 7][c] >> 3;
}
     4be:	8a b3       	in	r24, 0x1a	; 26
     4c0:	8f 63       	ori	r24, 0x3F	; 63
     4c2:	8a bb       	out	0x1a, r24	; 26
     4c4:	84 b3       	in	r24, 0x14	; 20
     4c6:	87 67       	ori	r24, 0x77	; 119
     4c8:	84 bb       	out	0x14, r24	; 20
     4ca:	85 b3       	in	r24, 0x15	; 21
     4cc:	80 64       	ori	r24, 0x40	; 64
     4ce:	85 bb       	out	0x15, r24	; 21
     4d0:	08 95       	ret

000004d2 <LEDMAT_swap_buffer>:
     4d2:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <__LEDMAT_CURR_BUF>
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	89 27       	eor	r24, r25
     4da:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <__LEDMAT_CURR_BUF>
     4de:	08 95       	ret

000004e0 <LEDMAT_copy_buffer>:
     4e0:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <__LEDMAT_CURR_BUF>
     4e4:	ea 2f       	mov	r30, r26
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	fe 2f       	mov	r31, r30
     4ea:	ee 27       	eor	r30, r30
     4ec:	e6 57       	subi	r30, 0x76	; 118
     4ee:	fe 4f       	sbci	r31, 0xFE	; 254
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	a8 27       	eor	r26, r24
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	ba 2f       	mov	r27, r26
     4f8:	aa 27       	eor	r26, r26
     4fa:	a6 57       	subi	r26, 0x76	; 118
     4fc:	be 4f       	sbci	r27, 0xFE	; 254
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	01 90       	ld	r0, Z+
     502:	0d 92       	st	X+, r0
     504:	8a 95       	dec	r24
     506:	e1 f7       	brne	.-8      	; 0x500 <LEDMAT_copy_buffer+0x20>
     508:	08 95       	ret

0000050a <LEDMAT_set_rgb_bit>:
     50a:	88 30       	cpi	r24, 0x08	; 8
     50c:	f8 f4       	brcc	.+62     	; 0x54c <LEDMAT_set_rgb_bit+0x42>
     50e:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <__LEDMAT_CURR_BUF>
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	e9 27       	eor	r30, r25
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	ee 0f       	add	r30, r30
     51e:	ff 1f       	adc	r31, r31
     520:	ee 0f       	add	r30, r30
     522:	ff 1f       	adc	r31, r31
     524:	e8 0f       	add	r30, r24
     526:	f1 1d       	adc	r31, r1
     528:	ee 0f       	add	r30, r30
     52a:	ff 1f       	adc	r31, r31
     52c:	e2 95       	swap	r30
     52e:	f2 95       	swap	r31
     530:	f0 7f       	andi	r31, 0xF0	; 240
     532:	fe 27       	eor	r31, r30
     534:	e0 7f       	andi	r30, 0xF0	; 240
     536:	fe 27       	eor	r31, r30
     538:	e6 57       	subi	r30, 0x76	; 118
     53a:	fe 4f       	sbci	r31, 0xFE	; 254
     53c:	e6 0f       	add	r30, r22
     53e:	f1 1d       	adc	r31, r1
     540:	80 81       	ld	r24, Z
     542:	88 7f       	andi	r24, 0xF8	; 248
     544:	47 70       	andi	r20, 0x07	; 7
     546:	48 2b       	or	r20, r24
     548:	40 83       	st	Z, r20
     54a:	08 95       	ret
     54c:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <__LEDMAT_CURR_BUF>
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	e9 27       	eor	r30, r25
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	87 70       	andi	r24, 0x07	; 7
     558:	ee 0f       	add	r30, r30
     55a:	ff 1f       	adc	r31, r31
     55c:	ee 0f       	add	r30, r30
     55e:	ff 1f       	adc	r31, r31
     560:	ee 0f       	add	r30, r30
     562:	ff 1f       	adc	r31, r31
     564:	e8 0f       	add	r30, r24
     566:	f1 1d       	adc	r31, r1
     568:	ee 0f       	add	r30, r30
     56a:	ff 1f       	adc	r31, r31
     56c:	e2 95       	swap	r30
     56e:	f2 95       	swap	r31
     570:	f0 7f       	andi	r31, 0xF0	; 240
     572:	fe 27       	eor	r31, r30
     574:	e0 7f       	andi	r30, 0xF0	; 240
     576:	fe 27       	eor	r31, r30
     578:	e6 57       	subi	r30, 0x76	; 118
     57a:	fe 4f       	sbci	r31, 0xFE	; 254
     57c:	e6 0f       	add	r30, r22
     57e:	f1 1d       	adc	r31, r1
     580:	80 81       	ld	r24, Z
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	44 0f       	add	r20, r20
     586:	55 1f       	adc	r21, r21
     588:	44 0f       	add	r20, r20
     58a:	55 1f       	adc	r21, r21
     58c:	44 0f       	add	r20, r20
     58e:	55 1f       	adc	r21, r21
     590:	87 7c       	andi	r24, 0xC7	; 199
     592:	48 73       	andi	r20, 0x38	; 56
     594:	48 2b       	or	r20, r24
     596:	40 83       	st	Z, r20
     598:	08 95       	ret

0000059a <LEDMAT_fill_rgb_bit>:

void LEDMAT_fill_rgb_bit(u8 rgb)
{
	memset(LEDMAT_BACK_BUF, rgb, sizeof(LEDMAT_BACK_BUF));
     59a:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <__LEDMAT_CURR_BUF>
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	29 27       	eor	r18, r25
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	32 2f       	mov	r19, r18
     5a6:	22 27       	eor	r18, r18
     5a8:	68 2f       	mov	r22, r24
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	51 e0       	ldi	r21, 0x01	; 1
     5b0:	c9 01       	movw	r24, r18
     5b2:	86 57       	subi	r24, 0x76	; 118
     5b4:	9e 4f       	sbci	r25, 0xFE	; 254
     5b6:	20 c6       	rjmp	.+3136   	; 0x11f8 <memset>
     5b8:	08 95       	ret

000005ba <LEDMAT_refresh>:

void LEDMAT_refresh()
{
	static u8 section;

	_tx_section(LEDMAT_FRONT_BUF[section]);
     5ba:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <__LEDMAT_CURR_BUF>
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	ee 0f       	add	r30, r30
     5ca:	ff 1f       	adc	r31, r31
     5cc:	ee 0f       	add	r30, r30
     5ce:	ff 1f       	adc	r31, r31
     5d0:	e8 0f       	add	r30, r24
     5d2:	f1 1d       	adc	r31, r1
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	e2 95       	swap	r30
     5da:	f2 95       	swap	r31
     5dc:	f0 7f       	andi	r31, 0xF0	; 240
     5de:	fe 27       	eor	r31, r30
     5e0:	e0 7f       	andi	r30, 0xF0	; 240
     5e2:	fe 27       	eor	r31, r30
     5e4:	e6 57       	subi	r30, 0x76	; 118
     5e6:	fe 4f       	sbci	r31, 0xFE	; 254
}
static inline void _out_disable() {
	PORT(LEDMAT_CR) |= _BV(LEDMAT_OE);
}
static inline void _tx_section(const u8* RGBs) {
	for (u8 i = 0; i < LEDMAT_COL; i++) {
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	0e c0       	rjmp	.+28     	; 0x608 <LEDMAT_refresh+0x4e>
		_rgb(*RGBs++);
     5ec:	80 81       	ld	r24, Z

static inline void _addr(u8 addr) {
	PORT(LEDMAT_CR) = (PORT(LEDMAT_CR) & ~0x07) | (addr & 0x07);
}
static inline void _rgb(u8 rgb) {
	PORT(LEDMAT_RGB) = (PORT(LEDMAT_RGB) & ~LEDMAT_RGB_ALL) | (rgb & LEDMAT_RGB_ALL);
     5ee:	9b b3       	in	r25, 0x1b	; 27
     5f0:	90 7c       	andi	r25, 0xC0	; 192
     5f2:	8f 73       	andi	r24, 0x3F	; 63
     5f4:	89 2b       	or	r24, r25
     5f6:	8b bb       	out	0x1b, r24	; 27
}
static inline void _rgb2(u8 rgb2) {
	PORT(LEDMAT_RGB) = (PORT(LEDMAT_RGB) & ~LEDMAT_RGB2) | ((rgb2 << 3) & LEDMAT_RGB2);
}
static inline void _clock() {
	PORT(LEDMAT_CR) |= _BV(LEDMAT_CLK);
     5f8:	85 b3       	in	r24, 0x15	; 21
     5fa:	80 61       	ori	r24, 0x10	; 16
     5fc:	85 bb       	out	0x15, r24	; 21
	PORT(LEDMAT_CR) &= ~_BV(LEDMAT_CLK);
     5fe:	85 b3       	in	r24, 0x15	; 21
     600:	8f 7e       	andi	r24, 0xEF	; 239
     602:	85 bb       	out	0x15, r24	; 21
}
static inline void _out_disable() {
	PORT(LEDMAT_CR) |= _BV(LEDMAT_OE);
}
static inline void _tx_section(const u8* RGBs) {
	for (u8 i = 0; i < LEDMAT_COL; i++) {
     604:	2f 5f       	subi	r18, 0xFF	; 255
		_rgb(*RGBs++);
     606:	31 96       	adiw	r30, 0x01	; 1
}
static inline void _out_disable() {
	PORT(LEDMAT_CR) |= _BV(LEDMAT_OE);
}
static inline void _tx_section(const u8* RGBs) {
	for (u8 i = 0; i < LEDMAT_COL; i++) {
     608:	20 32       	cpi	r18, 0x20	; 32
     60a:	80 f3       	brcs	.-32     	; 0x5ec <LEDMAT_refresh+0x32>
}
static inline void _out_enable() {
	PORT(LEDMAT_CR) &= ~_BV(LEDMAT_OE);
}
static inline void _out_disable() {
	PORT(LEDMAT_CR) |= _BV(LEDMAT_OE);
     60c:	85 b3       	in	r24, 0x15	; 21
     60e:	80 64       	ori	r24, 0x40	; 64
     610:	85 bb       	out	0x15, r24	; 21
static inline void _clock() {
	PORT(LEDMAT_CR) |= _BV(LEDMAT_CLK);
	PORT(LEDMAT_CR) &= ~_BV(LEDMAT_CLK);
}
static inline void _latch() {
	PORT(LEDMAT_CR) |= _BV(LEDMAT_LAT);
     612:	85 b3       	in	r24, 0x15	; 21
     614:	80 62       	ori	r24, 0x20	; 32
     616:	85 bb       	out	0x15, r24	; 21
	PORT(LEDMAT_CR) &= ~_BV(LEDMAT_LAT);
     618:	85 b3       	in	r24, 0x15	; 21
     61a:	8f 7d       	andi	r24, 0xDF	; 223
     61c:	85 bb       	out	0x15, r24	; 21

	_tx_section(LEDMAT_FRONT_BUF[section]);
	
	_out_disable();
	_latch();
	_addr(section);
     61e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>

#define LEDMAT_FRONT_BUF (__LEDMAT_BUFFER[__LEDMAT_CURR_BUF])
#define LEDMAT_BACK_BUF (__LEDMAT_BUFFER[__LEDMAT_CURR_BUF ^ 1])

static inline void _addr(u8 addr) {
	PORT(LEDMAT_CR) = (PORT(LEDMAT_CR) & ~0x07) | (addr & 0x07);
     622:	95 b3       	in	r25, 0x15	; 21
     624:	98 7f       	andi	r25, 0xF8	; 248
     626:	87 70       	andi	r24, 0x07	; 7
     628:	89 2b       	or	r24, r25
     62a:	85 bb       	out	0x15, r24	; 21
static inline void _latch() {
	PORT(LEDMAT_CR) |= _BV(LEDMAT_LAT);
	PORT(LEDMAT_CR) &= ~_BV(LEDMAT_LAT);
}
static inline void _out_enable() {
	PORT(LEDMAT_CR) &= ~_BV(LEDMAT_OE);
     62c:	85 b3       	in	r24, 0x15	; 21
     62e:	8f 7b       	andi	r24, 0xBF	; 191
     630:	85 bb       	out	0x15, r24	; 21
	_out_disable();
	_latch();
	_addr(section);
	_out_enable();
	
	section = RR(section, LEDMAT_SECTION);
     632:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
     636:	8f 5f       	subi	r24, 0xFF	; 255
     638:	87 70       	andi	r24, 0x07	; 7
     63a:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__data_end>
     63e:	08 95       	ret

00000640 <LEDMAT_OE_disable>:
}
static inline void _out_enable() {
	PORT(LEDMAT_CR) &= ~_BV(LEDMAT_OE);
}
static inline void _out_disable() {
	PORT(LEDMAT_CR) |= _BV(LEDMAT_OE);
     640:	85 b3       	in	r24, 0x15	; 21
     642:	80 64       	ori	r24, 0x40	; 64
     644:	85 bb       	out	0x15, r24	; 21
     646:	08 95       	ret

00000648 <set_display_brightness>:

// =================================================================

static void set_display_brightness(u8 brightness)
{
	if (brightness >= MAX_LEDMAT_BRIGHTNESS)
     648:	8f 3f       	cpi	r24, 0xFF	; 255
     64a:	11 f4       	brne	.+4      	; 0x650 <set_display_brightness+0x8>
		OCR2 = MAX_LEDMAT_BRIGHTNESS;
     64c:	83 bd       	out	0x23, r24	; 35
     64e:	08 95       	ret
	else if (brightness <= MIN_LEDMAT_BRIGHTNESS)
     650:	82 30       	cpi	r24, 0x02	; 2
     652:	18 f4       	brcc	.+6      	; 0x65a <set_display_brightness+0x12>
		OCR2 = MIN_LEDMAT_BRIGHTNESS;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	83 bd       	out	0x23, r24	; 35
     658:	08 95       	ret
	else
		OCR2 = brightness;
     65a:	83 bd       	out	0x23, r24	; 35
     65c:	08 95       	ret

0000065e <init>:
	TIMSK |= _BV(OCIE2);
}

static inline void BtN_init()
{
	DDR(BtN_PIN) &= ~BtN_ALL_PINS; // input
     65e:	81 b3       	in	r24, 0x11	; 17
     660:	80 7f       	andi	r24, 0xF0	; 240
     662:	81 bb       	out	0x11, r24	; 17
	PORT(BtN_PIN) |= BtN_ALL_PINS; // built-in pull-up
     664:	82 b3       	in	r24, 0x12	; 18
     666:	8f 60       	ori	r24, 0x0F	; 15
     668:	82 bb       	out	0x12, r24	; 18
}

static void init()
{
	BtN_init();
	LEDMAT_init();
     66a:	29 df       	rcall	.-430    	; 0x4be <LEDMAT_init>
// initilize========================================================

/* refresher for LED matrix & control brightness */
static inline void timer2_init()
{
	TIMSK |= _BV(TOIE2);
     66c:	87 b7       	in	r24, 0x37	; 55
     66e:	80 64       	ori	r24, 0x40	; 64
     670:	87 bf       	out	0x37, r24	; 55
	TCCR2 |= TC_REFRESH_CLOCK_SELECT;
     672:	85 b5       	in	r24, 0x25	; 37
     674:	83 60       	ori	r24, 0x03	; 3
     676:	85 bd       	out	0x25, r24	; 37
	OCR2 = DEFAULT_LEDMAT_BRIGHTNESS;
     678:	8a e2       	ldi	r24, 0x2A	; 42
     67a:	83 bd       	out	0x23, r24	; 35
	TIMSK |= _BV(OCIE2);
     67c:	87 b7       	in	r24, 0x37	; 55
     67e:	80 68       	ori	r24, 0x80	; 128
static void init()
{
	BtN_init();
	LEDMAT_init();
	timer2_init();
	TimeBase_init();
     680:	87 bf       	out	0x37, r24	; 55
     682:	1c c5       	rjmp	.+2616   	; 0x10bc <TimeBase_init>
     684:	08 95       	ret

00000686 <draw_level_bar>:

#define LEVEL_ROW	0
#define LEVEL_COL	0

static void draw_level_bar(u8 level)
{
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	d8 2f       	mov	r29, r24
	coord_t	col = 0;
     68c:	c0 e0       	ldi	r28, 0x00	; 0

	for (; col < level; col++)
     68e:	06 c0       	rjmp	.+12     	; 0x69c <draw_level_bar+0x16>
     690:	46 e0       	ldi	r20, 0x06	; 6
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	8f e0       	ldi	r24, 0x0F	; 15
     696:	8c 1b       	sub	r24, r28
     698:	38 df       	rcall	.-400    	; 0x50a <LEDMAT_set_rgb_bit>
     69a:	cf 5f       	subi	r28, 0xFF	; 255
     69c:	cd 17       	cp	r28, r29
     69e:	c0 f3       	brcs	.-16     	; 0x690 <draw_level_bar+0xa>
     6a0:	06 c0       	rjmp	.+12     	; 0x6ae <draw_level_bar+0x28>
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	8f e0       	ldi	r24, 0x0F	; 15
     6a8:	8c 1b       	sub	r24, r28
     6aa:	2f df       	rcall	.-418    	; 0x50a <LEDMAT_set_rgb_bit>
		DMAT_set_rgb_bit(LEVEL_ROW, LEVEL_COL + col, LEVEL_BAR_COLOR);
	for (; col < MAX_LEVEL; col++)
     6ac:	cf 5f       	subi	r28, 0xFF	; 255
     6ae:	c0 31       	cpi	r28, 0x10	; 16
     6b0:	c0 f3       	brcs	.-16     	; 0x6a2 <draw_level_bar+0x1c>
		DMAT_set_rgb_bit(LEVEL_ROW, LEVEL_COL + col, 0);
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <menu>:
}

// =================================================================

static u32 menu()
{
     6b8:	8f 92       	push	r8
     6ba:	9f 92       	push	r9
     6bc:	af 92       	push	r10
     6be:	bf 92       	push	r11
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	cf 93       	push	r28
#define STANDBY_SCREEN_ADDR		((u8*)0)
#define GAMEOVER_SCREEN_ADDR	((u8*)(DMAT_ROW * (DMAT_COL / 2)))

static inline void standby_screen()
{
	DMAT_draw_screen_from_pgm((const u8*)STANDBY_IMAGE);
     6ca:	8c e8       	ldi	r24, 0x8C	; 140
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	53 de       	rcall	.-858    	; 0x376 <DMAT_draw_screen_from_pgm>
{
	DEF_PREV_MS(LEVEL_CHANGE_MS) = 0;
	static u8 curr_level = DEFAULT_LEVEL;
	
	standby_screen();
	draw_level_bar(curr_level);
     6d0:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <curr_level.2128>
}


#define DMAT_CP	_BV(0) // copy(copy Front Buffer to Back Buffer)
static inline void DMAT_update(u8 flags) {
	LEDMAT_swap_buffer(); // back buffer <=> front buffer
     6d4:	d8 df       	rcall	.-80     	; 0x686 <draw_level_bar>
     6d6:	fd de       	rcall	.-518    	; 0x4d2 <LEDMAT_swap_buffer>
	
	if (flags & DMAT_CP)
		LEDMAT_copy_buffer(); // copy front buffer to back buffer
     6d8:	03 df       	rcall	.-506    	; 0x4e0 <LEDMAT_copy_buffer>
     6da:	81 2c       	mov	r8, r1

// =================================================================

static u32 menu()
{
	DEF_PREV_MS(LEVEL_CHANGE_MS) = 0;
     6dc:	91 2c       	mov	r9, r1
     6de:	54 01       	movw	r10, r8
     6e0:	c0 b3       	in	r28, 0x10	; 16
	standby_screen();
	draw_level_bar(curr_level);
	DMAT_update(DMAT_CP);

	loop {
		u8 input = BtN_PRESSED();
     6e2:	c0 95       	com	r28
     6e4:	c0 ff       	sbrs	r28, 0
		
		if (input & _BV(BtN_UP)) {
     6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <menu+0x3a>
     6e8:	83 b5       	in	r24, 0x23	; 35
			u8 brightness = get_display_brightness();
			if (brightness < MAX_LEDMAT_BRIGHTNESS)
     6ea:	8f 3f       	cpi	r24, 0xFF	; 255
     6ec:	11 f0       	breq	.+4      	; 0x6f2 <menu+0x3a>
			set_display_brightness(brightness + 1);
     6ee:	8f 5f       	subi	r24, 0xFF	; 255
     6f0:	ab df       	rcall	.-170    	; 0x648 <set_display_brightness>
     6f2:	c1 ff       	sbrs	r28, 1
		}
		if (input & _BV(BtN_DOWN)) {
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <menu+0x48>
		OCR2 = brightness;
}

static inline u8 get_display_brightness()
{
	return OCR2;
     6f6:	83 b5       	in	r24, 0x23	; 35
			if (brightness < MAX_LEDMAT_BRIGHTNESS)
			set_display_brightness(brightness + 1);
		}
		if (input & _BV(BtN_DOWN)) {
			u8 brightness = get_display_brightness();
			if (brightness > MIN_LEDMAT_BRIGHTNESS)
     6f8:	82 30       	cpi	r24, 0x02	; 2
			set_display_brightness(brightness - 1);
     6fa:	10 f0       	brcs	.+4      	; 0x700 <menu+0x48>
     6fc:	81 50       	subi	r24, 0x01	; 1
     6fe:	a4 df       	rcall	.-184    	; 0x648 <set_display_brightness>
		}
		if (input & _BV(BtN_LEFT)) {
     700:	c2 ff       	sbrs	r28, 2
     702:	1b c0       	rjmp	.+54     	; 0x73a <menu+0x82>
			u32 curr_ms = millis();
     704:	e2 d4       	rcall	.+2500   	; 0x10ca <millis>
     706:	6b 01       	movw	r12, r22
     708:	7c 01       	movw	r14, r24
     70a:	dc 01       	movw	r26, r24
			if (TIME_OUT_MSA(curr_ms, LEVEL_CHANGE_MS)) {
     70c:	cb 01       	movw	r24, r22
     70e:	88 19       	sub	r24, r8
     710:	99 09       	sbc	r25, r9
     712:	aa 09       	sbc	r26, r10
     714:	bb 09       	sbc	r27, r11
     716:	86 39       	cpi	r24, 0x96	; 150
     718:	91 05       	cpc	r25, r1
     71a:	a1 05       	cpc	r26, r1
     71c:	b1 05       	cpc	r27, r1
     71e:	68 f0       	brcs	.+26     	; 0x73a <menu+0x82>
				draw_level_bar(curr_level = NEXT_LEVEL(curr_level));
     720:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <curr_level.2128>
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	61 e1       	ldi	r22, 0x11	; 17
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	da d4       	rcall	.+2484   	; 0x10e2 <__divmodhi4>
     72e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <curr_level.2128>
     732:	a9 df       	rcall	.-174    	; 0x686 <draw_level_bar>
}


#define DMAT_CP	_BV(0) // copy(copy Front Buffer to Back Buffer)
static inline void DMAT_update(u8 flags) {
	LEDMAT_swap_buffer(); // back buffer <=> front buffer
     734:	ce de       	rcall	.-612    	; 0x4d2 <LEDMAT_swap_buffer>
     736:	46 01       	movw	r8, r12
			if (brightness > MIN_LEDMAT_BRIGHTNESS)
			set_display_brightness(brightness - 1);
		}
		if (input & _BV(BtN_LEFT)) {
			u32 curr_ms = millis();
			if (TIME_OUT_MSA(curr_ms, LEVEL_CHANGE_MS)) {
     738:	57 01       	movw	r10, r14
     73a:	c3 fd       	sbrc	r28, 3
				draw_level_bar(curr_level = NEXT_LEVEL(curr_level));
				DMAT_update(0);
			}
		}
		if (input & _BV(BtN_RIGHT)) {
     73c:	07 c0       	rjmp	.+14     	; 0x74c <menu+0x94>
     73e:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     740:	9c e9       	ldi	r25, 0x9C	; 156
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <menu+0x8a>
     746:	00 c0       	rjmp	.+0      	; 0x748 <menu+0x90>
     748:	00 00       	nop
     74a:	ca cf       	rjmp	.-108    	; 0x6e0 <menu+0x28>
     74c:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <curr_level.2128>
		}
		
		_delay_ms(10);
	}
	
	return level_to_tick(curr_level);
     750:	2f ee       	ldi	r18, 0xEF	; 239
#define NEXT_LEVEL(level) (((level) + 1) % (MAX_LEVEL + 1))

_Static_assert(17 * MAX_LEVEL < 300, "nope");
static inline u32 level_to_tick(u8 level)
{
	return 300 - 17 * level;
     752:	26 03       	mulsu	r18, r22
     754:	b0 01       	movw	r22, r0
     756:	11 24       	eor	r1, r1
     758:	64 5d       	subi	r22, 0xD4	; 212
     75a:	7e 4f       	sbci	r23, 0xFE	; 254
     75c:	07 2e       	mov	r0, r23
     75e:	00 0c       	add	r0, r0
     760:	88 0b       	sbc	r24, r24
     762:	99 0b       	sbc	r25, r25
     764:	cf 91       	pop	r28
		
		_delay_ms(10);
	}
	
	return level_to_tick(curr_level);
}
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	bf 90       	pop	r11
     770:	af 90       	pop	r10
     772:	9f 90       	pop	r9
     774:	8f 90       	pop	r8
     776:	08 95       	ret

00000778 <countdown>:
     778:	0f 93       	push	r16
}

#define COUNT_ROW ((DMAT_ROW - DMAT_DIGIT_RATIO_H * 2) / 2)
#define COUNT_COL ((DMAT_COL - DMAT_DIGIT_RATIO_W * 2) / 2)
static void countdown(u8 cnt)
{
     77a:	cf 93       	push	r28
     77c:	c8 2f       	mov	r28, r24
	for (u8 i = cnt; i > 0; i--) {
     77e:	13 c0       	rjmp	.+38     	; 0x7a6 <countdown+0x2e>
		DMAT_clear();
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0b df       	rcall	.-490    	; 0x59a <LEDMAT_fill_rgb_bit>
		DMAT_draw_digit_bit(COUNT_ROW, COUNT_COL, i, CR | CG | CB, 2);
     784:	02 e0       	ldi	r16, 0x02	; 2
     786:	27 e0       	ldi	r18, 0x07	; 7
     788:	4c 2f       	mov	r20, r28
     78a:	65 e0       	ldi	r22, 0x05	; 5
     78c:	8b e0       	ldi	r24, 0x0B	; 11
     78e:	be dd       	rcall	.-1156   	; 0x30c <DMAT_draw_digit_bit>
     790:	a0 de       	rcall	.-704    	; 0x4d2 <LEDMAT_swap_buffer>
     792:	2f ef       	ldi	r18, 0xFF	; 255
     794:	83 ed       	ldi	r24, 0xD3	; 211
     796:	90 e3       	ldi	r25, 0x30	; 48
     798:	21 50       	subi	r18, 0x01	; 1
     79a:	80 40       	sbci	r24, 0x00	; 0
     79c:	90 40       	sbci	r25, 0x00	; 0
     79e:	e1 f7       	brne	.-8      	; 0x798 <countdown+0x20>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <countdown+0x2a>
     7a2:	00 00       	nop

#define COUNT_ROW ((DMAT_ROW - DMAT_DIGIT_RATIO_H * 2) / 2)
#define COUNT_COL ((DMAT_COL - DMAT_DIGIT_RATIO_W * 2) / 2)
static void countdown(u8 cnt)
{
	for (u8 i = cnt; i > 0; i--) {
     7a4:	c1 50       	subi	r28, 0x01	; 1
     7a6:	c1 11       	cpse	r28, r1
     7a8:	eb cf       	rjmp	.-42     	; 0x780 <countdown+0x8>
		DMAT_draw_digit_bit(COUNT_ROW, COUNT_COL, i, CR | CG | CB, 2);
		DMAT_update(0);

		_delay_ms(1000);
	}
}
     7aa:	cf 91       	pop	r28
     7ac:	0f 91       	pop	r16
     7ae:	08 95       	ret

000007b0 <gameover_screen>:
}

static void gameover_screen()
{

	DMAT_draw_screen_from_pgm((const u8*)GAMEOVER_IMAGE);
     7b0:	8c e8       	ldi	r24, 0x8C	; 140
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	e0 dd       	rcall	.-1088   	; 0x376 <DMAT_draw_screen_from_pgm>
	draw_score(DMAT_ROW / 2 + 3);
     7b6:	83 e1       	ldi	r24, 0x13	; 19
     7b8:	f9 d2       	rcall	.+1522   	; 0xdac <draw_score>
     7ba:	8b ce       	rjmp	.-746    	; 0x4d2 <LEDMAT_swap_buffer>
     7bc:	08 95       	ret

000007be <gameover>:
	return level_to_tick(curr_level);
}

static void gameover()
{
	gameover_screen();
     7be:	f8 df       	rcall	.-16     	; 0x7b0 <gameover_screen>
     7c0:	2f ef       	ldi	r18, 0xFF	; 255
     7c2:	89 e6       	ldi	r24, 0x69	; 105
     7c4:	98 e1       	ldi	r25, 0x18	; 24
     7c6:	21 50       	subi	r18, 0x01	; 1
     7c8:	80 40       	sbci	r24, 0x00	; 0
     7ca:	90 40       	sbci	r25, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <gameover+0x8>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <gameover+0x12>
     7d0:	00 00       	nop
	
	_delay_ms(500);
	while (!BtN_PRESSED());
     7d2:	80 b3       	in	r24, 0x10	; 16
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	80 95       	com	r24
     7d8:	90 95       	com	r25
     7da:	8f 70       	andi	r24, 0x0F	; 15
     7dc:	99 27       	eor	r25, r25
     7de:	89 2b       	or	r24, r25
     7e0:	c1 f3       	breq	.-16     	; 0x7d2 <gameover+0x14>
}
     7e2:	08 95       	ret

000007e4 <run>:

static void run()
{
     7e4:	4f 92       	push	r4
     7e6:	5f 92       	push	r5
     7e8:	6f 92       	push	r6
     7ea:	7f 92       	push	r7
     7ec:	8f 92       	push	r8
     7ee:	9f 92       	push	r9
     7f0:	af 92       	push	r10
     7f2:	bf 92       	push	r11
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	00 d0       	rcall	.+0      	; 0x802 <run+0x1e>
     802:	00 d0       	rcall	.+0      	; 0x804 <run+0x20>
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
	DEF_PREV_MS(INPUT_POLL_MS);
	u32 TICK_PREV, TICK;

	tetris_init(millis());
     808:	60 d4       	rcall	.+2240   	; 0x10ca <millis>
     80a:	cb 01       	movw	r24, r22
     80c:	12 d4       	rcall	.+2084   	; 0x1032 <tetris_init>
     80e:	2f ef       	ldi	r18, 0xFF	; 255
     810:	39 e6       	ldi	r19, 0x69	; 105
     812:	48 e1       	ldi	r20, 0x18	; 24
     814:	21 50       	subi	r18, 0x01	; 1
     816:	30 40       	sbci	r19, 0x00	; 0
     818:	40 40       	sbci	r20, 0x00	; 0
     81a:	e1 f7       	brne	.-8      	; 0x814 <run+0x30>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <run+0x3a>

	_delay_ms(500);
	TICK = menu();
     81e:	00 00       	nop
     820:	4b df       	rcall	.-362    	; 0x6b8 <menu>
     822:	2b 01       	movw	r4, r22

	countdown(3);
     824:	3c 01       	movw	r6, r24
     826:	83 e0       	ldi	r24, 0x03	; 3
     828:	a7 df       	rcall	.-178    	; 0x778 <countdown>

	u32 init_value = millis();
     82a:	4f d4       	rcall	.+2206   	; 0x10ca <millis>
     82c:	9b 01       	movw	r18, r22
	PREV_MS(INPUT_POLL_MS) = init_value - INPUT_POLL_MS;
     82e:	ac 01       	movw	r20, r24
     830:	2f 50       	subi	r18, 0x0F	; 15
     832:	31 09       	sbc	r19, r1
     834:	41 09       	sbc	r20, r1
     836:	51 09       	sbc	r21, r1
     838:	29 83       	std	Y+1, r18	; 0x01
     83a:	3a 83       	std	Y+2, r19	; 0x02
     83c:	4b 83       	std	Y+3, r20	; 0x03
     83e:	5c 83       	std	Y+4, r21	; 0x04
     840:	4b 01       	movw	r8, r22
	TICK_PREV = init_value - TICK;
     842:	5c 01       	movw	r10, r24
     844:	84 18       	sub	r8, r4
     846:	95 08       	sbc	r9, r5
     848:	a6 08       	sbc	r10, r6
     84a:	b7 08       	sbc	r11, r7

	loop {
		u32 curr = millis();
     84c:	3e d4       	rcall	.+2172   	; 0x10ca <millis>
     84e:	6b 01       	movw	r12, r22
     850:	7c 01       	movw	r14, r24
     852:	dc 01       	movw	r26, r24

		if (TIME_OUT_MSI(curr, INPUT_POLL_MS))
     854:	cb 01       	movw	r24, r22
     856:	29 81       	ldd	r18, Y+1	; 0x01
     858:	3a 81       	ldd	r19, Y+2	; 0x02
     85a:	4b 81       	ldd	r20, Y+3	; 0x03
     85c:	5c 81       	ldd	r21, Y+4	; 0x04
     85e:	82 1b       	sub	r24, r18
     860:	93 0b       	sbc	r25, r19
     862:	a4 0b       	sbc	r26, r20
     864:	b5 0b       	sbc	r27, r21
     866:	0f 97       	sbiw	r24, 0x0f	; 15
     868:	a1 05       	cpc	r26, r1
     86a:	b1 05       	cpc	r27, r1
     86c:	60 f0       	brcs	.+24     	; 0x886 <run+0xa2>
     86e:	21 5f       	subi	r18, 0xF1	; 241
     870:	3f 4f       	sbci	r19, 0xFF	; 255
     872:	4f 4f       	sbci	r20, 0xFF	; 255
     874:	5f 4f       	sbci	r21, 0xFF	; 255
     876:	29 83       	std	Y+1, r18	; 0x01
     878:	3a 83       	std	Y+2, r19	; 0x02
     87a:	4b 83       	std	Y+3, r20	; 0x03
     87c:	5c 83       	std	Y+4, r21	; 0x04
			tetris_process_input(BtN_PRESSED());
     87e:	80 b3       	in	r24, 0x10	; 16
     880:	80 95       	com	r24
     882:	8f 70       	andi	r24, 0x0F	; 15
     884:	1e d3       	rcall	.+1596   	; 0xec2 <tetris_process_input>
     886:	c8 18       	sub	r12, r8

		if (TIME_OUTI(curr, TICK_PREV, TICK))
     888:	d9 08       	sbc	r13, r9
     88a:	ea 08       	sbc	r14, r10
     88c:	fb 08       	sbc	r15, r11
     88e:	c4 14       	cp	r12, r4
     890:	d5 04       	cpc	r13, r5
     892:	e6 04       	cpc	r14, r6
     894:	f7 04       	cpc	r15, r7
     896:	d0 f2       	brcs	.-76     	; 0x84c <run+0x68>
     898:	84 0c       	add	r8, r4
     89a:	95 1c       	adc	r9, r5
     89c:	a6 1c       	adc	r10, r6
			if (!tetris_do_tick()) break;
     89e:	b7 1c       	adc	r11, r7
     8a0:	ae d3       	rcall	.+1884   	; 0xffe <tetris_do_tick>
     8a2:	81 11       	cpse	r24, r1
     8a4:	d3 cf       	rjmp	.-90     	; 0x84c <run+0x68>
	}

	gameover();
     8a6:	8b df       	rcall	.-234    	; 0x7be <gameover>
     8a8:	0f 90       	pop	r0

}
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	df 90       	pop	r13
     8ba:	cf 90       	pop	r12
     8bc:	bf 90       	pop	r11
     8be:	af 90       	pop	r10
     8c0:	9f 90       	pop	r9
     8c2:	8f 90       	pop	r8
     8c4:	7f 90       	pop	r7
     8c6:	6f 90       	pop	r6
     8c8:	5f 90       	pop	r5
     8ca:	4f 90       	pop	r4
     8cc:	08 95       	ret

000008ce <main>:
     8ce:	c7 de       	rcall	.-626    	; 0x65e <init>

int main()
{
	init();
	sei();
	loop run();
     8d0:	78 94       	sei
     8d2:	88 df       	rcall	.-240    	; 0x7e4 <run>
     8d4:	fe cf       	rjmp	.-4      	; 0x8d2 <main+0x4>

000008d6 <set_piece>:
	R = PR = rnum % 4;
	X = PX = rnum % (BOARD_COL - NUM(R, 16));
}

// set the value of the board for a particular (x,y,r) piece
static void set_piece(i8 x, i8 y, i8 r, u8 v) {
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	52 2f       	mov	r21, r18
	for (i8 i = 0; i < 8; i += 2)
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	4d c0       	rjmp	.+154    	; 0x982 <set_piece+0xac>
		BOARD[NUM(r, i * 2) + y][NUM(r, (i * 2) + 2) + x] = v;
     8e8:	79 2f       	mov	r23, r25
     8ea:	77 0f       	add	r23, r23
	{ 247872, 799248, 247872, 799248 },
	{ 614928, 399424, 615744, 428369 },
};

// extract a 2-bit number from a block entry
static inline i8 NUM(i8 r, i8 n) { return (BLOCK[P][r] >> n) & 3; }
     8ec:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <P>
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	ee 0f       	add	r30, r30
     8f4:	ff 1f       	adc	r31, r31
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	e4 0f       	add	r30, r20
     8fc:	f1 1d       	adc	r31, r1
     8fe:	47 fd       	sbrc	r20, 7
     900:	fa 95       	dec	r31
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	e8 5e       	subi	r30, 0xE8	; 232
     90c:	fe 4f       	sbci	r31, 0xFE	; 254
     90e:	00 81       	ld	r16, Z
     910:	11 81       	ldd	r17, Z+1	; 0x01
     912:	22 81       	ldd	r18, Z+2	; 0x02
     914:	33 81       	ldd	r19, Z+3	; 0x03
     916:	68 01       	movw	r12, r16
     918:	79 01       	movw	r14, r18
     91a:	04 c0       	rjmp	.+8      	; 0x924 <set_piece+0x4e>
     91c:	f6 94       	lsr	r15
     91e:	e7 94       	ror	r14
     920:	d7 94       	ror	r13
     922:	c7 94       	ror	r12
     924:	7a 95       	dec	r23
     926:	d2 f7       	brpl	.-12     	; 0x91c <set_piece+0x46>
     928:	7c 2d       	mov	r23, r12
     92a:	73 70       	andi	r23, 0x03	; 3
}

// set the value of the board for a particular (x,y,r) piece
static void set_piece(i8 x, i8 y, i8 r, u8 v) {
	for (i8 i = 0; i < 8; i += 2)
		BOARD[NUM(r, i * 2) + y][NUM(r, (i * 2) + 2) + x] = v;
     92c:	e6 2f       	mov	r30, r22
     92e:	06 2e       	mov	r0, r22
     930:	00 0c       	add	r0, r0
     932:	ff 0b       	sbc	r31, r31
     934:	e7 0f       	add	r30, r23
     936:	f1 1d       	adc	r31, r1
     938:	a9 2f       	mov	r26, r25
     93a:	09 2e       	mov	r0, r25
     93c:	00 0c       	add	r0, r0
     93e:	bb 0b       	sbc	r27, r27
     940:	11 96       	adiw	r26, 0x01	; 1
     942:	aa 0f       	add	r26, r26
	{ 247872, 799248, 247872, 799248 },
	{ 614928, 399424, 615744, 428369 },
};

// extract a 2-bit number from a block entry
static inline i8 NUM(i8 r, i8 n) { return (BLOCK[P][r] >> n) & 3; }
     944:	04 c0       	rjmp	.+8      	; 0x94e <set_piece+0x78>
     946:	36 95       	lsr	r19
     948:	27 95       	ror	r18
     94a:	17 95       	ror	r17
     94c:	07 95       	ror	r16
     94e:	aa 95       	dec	r26
     950:	d2 f7       	brpl	.-12     	; 0x946 <set_piece+0x70>
     952:	03 70       	andi	r16, 0x03	; 3
}

// set the value of the board for a particular (x,y,r) piece
static void set_piece(i8 x, i8 y, i8 r, u8 v) {
	for (i8 i = 0; i < 8; i += 2)
		BOARD[NUM(r, i * 2) + y][NUM(r, (i * 2) + 2) + x] = v;
     954:	28 2f       	mov	r18, r24
     956:	08 2e       	mov	r0, r24
     958:	00 0c       	add	r0, r0
     95a:	33 0b       	sbc	r19, r19
     95c:	20 0f       	add	r18, r16
     95e:	31 1d       	adc	r19, r1
     960:	df 01       	movw	r26, r30
     962:	aa 0f       	add	r26, r26
     964:	bb 1f       	adc	r27, r27
     966:	ee 0f       	add	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	ee 0f       	add	r30, r30
     970:	ff 1f       	adc	r31, r31
     972:	ea 0f       	add	r30, r26
     974:	fb 1f       	adc	r31, r27
     976:	ec 56       	subi	r30, 0x6C	; 108
     978:	fc 4f       	sbci	r31, 0xFC	; 252
     97a:	e2 0f       	add	r30, r18
     97c:	f3 1f       	adc	r31, r19
     97e:	50 83       	st	Z, r21
	X = PX = rnum % (BOARD_COL - NUM(R, 16));
}

// set the value of the board for a particular (x,y,r) piece
static void set_piece(i8 x, i8 y, i8 r, u8 v) {
	for (i8 i = 0; i < 8; i += 2)
     980:	9e 5f       	subi	r25, 0xFE	; 254
     982:	98 30       	cpi	r25, 0x08	; 8
     984:	0c f4       	brge	.+2      	; 0x988 <set_piece+0xb2>
     986:	b0 cf       	rjmp	.-160    	; 0x8e8 <set_piece+0x12>
		BOARD[NUM(r, i * 2) + y][NUM(r, (i * 2) + 2) + x] = v;
}
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	08 95       	ret

00000996 <update_piece>:

// move a piece from old (p*) coords to new
static void update_piece() {
	set_piece(PX, PY, PR, 0);
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	40 91 5f 04 	lds	r20, 0x045F	; 0x80045f <PR>
     99c:	60 91 60 04 	lds	r22, 0x0460	; 0x800460 <PY>
     9a0:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <PX>
     9a4:	98 df       	rcall	.-208    	; 0x8d6 <set_piece>
	set_piece(PX = X, PY = Y, PR = R, P + 1);
     9a6:	20 91 5e 04 	lds	r18, 0x045E	; 0x80045e <P>
     9aa:	2f 5f       	subi	r18, 0xFF	; 255
     9ac:	40 91 62 04 	lds	r20, 0x0462	; 0x800462 <R>
     9b0:	40 93 5f 04 	sts	0x045F, r20	; 0x80045f <PR>
     9b4:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <Y>
     9b8:	60 93 60 04 	sts	0x0460, r22	; 0x800460 <PY>
     9bc:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <X>
     9c0:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <PX>
     9c4:	88 cf       	rjmp	.-240    	; 0x8d6 <set_piece>
     9c6:	08 95       	ret

000009c8 <check_hit>:
		CONTINUE:;
	}
}

// check if placing p at (x,y,r) will be a collision
static u8 check_hit(i8 x, i8 y, i8 r) {
     9c8:	8f 92       	push	r8
     9ca:	9f 92       	push	r9
     9cc:	af 92       	push	r10
     9ce:	bf 92       	push	r11
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
	if (y + NUM(r, 18) > 19) return 1;
     9de:	c6 2f       	mov	r28, r22
     9e0:	66 0f       	add	r22, r22
     9e2:	dd 0b       	sbc	r29, r29
	{ 247872, 799248, 247872, 799248 },
	{ 614928, 399424, 615744, 428369 },
};

// extract a 2-bit number from a block entry
static inline i8 NUM(i8 r, i8 n) { return (BLOCK[P][r] >> n) & 3; }
     9e4:	e4 2e       	mov	r14, r20
     9e6:	44 0f       	add	r20, r20
     9e8:	ff 08       	sbc	r15, r15
     9ea:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <P>
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	ee 0d       	add	r30, r14
     9fa:	ff 1d       	adc	r31, r15
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	ee 0f       	add	r30, r30
     a02:	ff 1f       	adc	r31, r31
     a04:	e8 5e       	subi	r30, 0xE8	; 232
     a06:	fe 4f       	sbci	r31, 0xFE	; 254
     a08:	40 81       	ld	r20, Z
     a0a:	51 81       	ldd	r21, Z+1	; 0x01
     a0c:	62 81       	ldd	r22, Z+2	; 0x02
     a0e:	73 81       	ldd	r23, Z+3	; 0x03
     a10:	03 2e       	mov	r0, r19
     a12:	32 e1       	ldi	r19, 0x12	; 18
     a14:	76 95       	lsr	r23
     a16:	67 95       	ror	r22
     a18:	57 95       	ror	r21
     a1a:	47 95       	ror	r20
     a1c:	3a 95       	dec	r19
     a1e:	d1 f7       	brne	.-12     	; 0xa14 <check_hit+0x4c>
     a20:	30 2d       	mov	r19, r0
     a22:	43 70       	andi	r20, 0x03	; 3
	}
}

// check if placing p at (x,y,r) will be a collision
static u8 check_hit(i8 x, i8 y, i8 r) {
	if (y + NUM(r, 18) > 19) return 1;
     a24:	9e 01       	movw	r18, r28
     a26:	24 0f       	add	r18, r20
     a28:	31 1d       	adc	r19, r1
     a2a:	24 31       	cpi	r18, 0x14	; 20
     a2c:	31 05       	cpc	r19, r1
     a2e:	0c f0       	brlt	.+2      	; 0xa32 <check_hit+0x6a>
     a30:	69 c0       	rjmp	.+210    	; 0xb04 <check_hit+0x13c>
     a32:	d8 2e       	mov	r13, r24

	set_piece(PX, PY, PR, 0);
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	40 91 5f 04 	lds	r20, 0x045F	; 0x80045f <PR>
     a3a:	60 91 60 04 	lds	r22, 0x0460	; 0x800460 <PY>
     a3e:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <PX>
     a42:	49 df       	rcall	.-366    	; 0x8d6 <set_piece>

	u8 is_hit = 0;
	for (u8 i = 0; i < 8; i += 2) {
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	4c c0       	rjmp	.+152    	; 0xae0 <check_hit+0x118>
	{ 247872, 799248, 247872, 799248 },
	{ 614928, 399424, 615744, 428369 },
};

// extract a 2-bit number from a block entry
static inline i8 NUM(i8 r, i8 n) { return (BLOCK[P][r] >> n) & 3; }
     a48:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <P>
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	ee 0f       	add	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	ee 0d       	add	r30, r14
     a58:	ff 1d       	adc	r31, r15
     a5a:	ee 0f       	add	r30, r30
     a5c:	ff 1f       	adc	r31, r31
     a5e:	ee 0f       	add	r30, r30
     a60:	ff 1f       	adc	r31, r31
     a62:	e8 5e       	subi	r30, 0xE8	; 232
     a64:	fe 4f       	sbci	r31, 0xFE	; 254
     a66:	00 81       	ld	r16, Z
     a68:	11 81       	ldd	r17, Z+1	; 0x01
     a6a:	22 81       	ldd	r18, Z+2	; 0x02
     a6c:	33 81       	ldd	r19, Z+3	; 0x03
     a6e:	84 2f       	mov	r24, r20
     a70:	88 0f       	add	r24, r24
     a72:	48 01       	movw	r8, r16
     a74:	59 01       	movw	r10, r18
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <check_hit+0xb8>
     a78:	b6 94       	lsr	r11
     a7a:	a7 94       	ror	r10
     a7c:	97 94       	ror	r9
     a7e:	87 94       	ror	r8
     a80:	8a 95       	dec	r24
     a82:	d2 f7       	brpl	.-12     	; 0xa78 <check_hit+0xb0>
     a84:	d5 01       	movw	r26, r10
     a86:	c4 01       	movw	r24, r8
     a88:	83 70       	andi	r24, 0x03	; 3

	set_piece(PX, PY, PR, 0);

	u8 is_hit = 0;
	for (u8 i = 0; i < 8; i += 2) {
		if (BOARD[y + NUM(r, i * 2)][x + NUM(r, (i * 2) + 2)]) {
     a8a:	5e 01       	movw	r10, r28
     a8c:	a8 0e       	add	r10, r24
     a8e:	b1 1c       	adc	r11, r1
     a90:	c5 01       	movw	r24, r10
     a92:	64 2f       	mov	r22, r20
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	6f 5f       	subi	r22, 0xFF	; 255
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	66 0f       	add	r22, r22
	{ 247872, 799248, 247872, 799248 },
	{ 614928, 399424, 615744, 428369 },
};

// extract a 2-bit number from a block entry
static inline i8 NUM(i8 r, i8 n) { return (BLOCK[P][r] >> n) & 3; }
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <check_hit+0xde>
     a9e:	36 95       	lsr	r19
     aa0:	27 95       	ror	r18
     aa2:	17 95       	ror	r17
     aa4:	07 95       	ror	r16
     aa6:	6a 95       	dec	r22
     aa8:	d2 f7       	brpl	.-12     	; 0xa9e <check_hit+0xd6>
     aaa:	03 70       	andi	r16, 0x03	; 3

	set_piece(PX, PY, PR, 0);

	u8 is_hit = 0;
	for (u8 i = 0; i < 8; i += 2) {
		if (BOARD[y + NUM(r, i * 2)][x + NUM(r, (i * 2) + 2)]) {
     aac:	00 2e       	mov	r0, r16
     aae:	00 0c       	add	r0, r0
     ab0:	11 0b       	sbc	r17, r17
     ab2:	0d 0d       	add	r16, r13
     ab4:	11 1d       	adc	r17, r1
     ab6:	d7 fc       	sbrc	r13, 7
     ab8:	1a 95       	dec	r17
     aba:	f5 01       	movw	r30, r10
     abc:	ee 0f       	add	r30, r30
     abe:	ff 1f       	adc	r31, r31
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	e8 0f       	add	r30, r24
     ace:	f9 1f       	adc	r31, r25
     ad0:	ec 56       	subi	r30, 0x6C	; 108
     ad2:	fc 4f       	sbci	r31, 0xFC	; 252
     ad4:	e0 0f       	add	r30, r16
     ad6:	f1 1f       	adc	r31, r17
     ad8:	80 81       	ld	r24, Z
     ada:	81 11       	cpse	r24, r1
     adc:	06 c0       	rjmp	.+12     	; 0xaea <check_hit+0x122>
	if (y + NUM(r, 18) > 19) return 1;

	set_piece(PX, PY, PR, 0);

	u8 is_hit = 0;
	for (u8 i = 0; i < 8; i += 2) {
     ade:	4e 5f       	subi	r20, 0xFE	; 254
     ae0:	48 30       	cpi	r20, 0x08	; 8
     ae2:	08 f4       	brcc	.+2      	; 0xae6 <check_hit+0x11e>
     ae4:	b1 cf       	rjmp	.-158    	; 0xa48 <check_hit+0x80>
static u8 check_hit(i8 x, i8 y, i8 r) {
	if (y + NUM(r, 18) > 19) return 1;

	set_piece(PX, PY, PR, 0);

	u8 is_hit = 0;
     ae6:	c0 e0       	ldi	r28, 0x00	; 0
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <check_hit+0x124>
	for (u8 i = 0; i < 8; i += 2) {
		if (BOARD[y + NUM(r, i * 2)][x + NUM(r, (i * 2) + 2)]) {
			is_hit = 1;
     aea:	c1 e0       	ldi	r28, 0x01	; 1
			break;
		}
	}

	set_piece(PX, PY, PR, P + 1);
     aec:	20 91 5e 04 	lds	r18, 0x045E	; 0x80045e <P>
     af0:	2f 5f       	subi	r18, 0xFF	; 255
     af2:	40 91 5f 04 	lds	r20, 0x045F	; 0x80045f <PR>
     af6:	60 91 60 04 	lds	r22, 0x0460	; 0x800460 <PY>
     afa:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <PX>
     afe:	eb de       	rcall	.-554    	; 0x8d6 <set_piece>
	return is_hit;
     b00:	8c 2f       	mov	r24, r28
     b02:	01 c0       	rjmp	.+2      	; 0xb06 <check_hit+0x13e>
	}
}

// check if placing p at (x,y,r) will be a collision
static u8 check_hit(i8 x, i8 y, i8 r) {
	if (y + NUM(r, 18) > 19) return 1;
     b04:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	set_piece(PX, PY, PR, P + 1);
	return is_hit;
}
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	df 90       	pop	r13
     b14:	bf 90       	pop	r11
     b16:	af 90       	pop	r10
     b18:	9f 90       	pop	r9
     b1a:	8f 90       	pop	r8
     b1c:	08 95       	ret

00000b1e <rotate_piece>:
	//remove_line();
	//new_piece();
//}

static void rotate_piece(u8 flag) {
	R = (flag == LEFT)  ? LR(R, 4) : RR(R, 4);
     b1e:	84 30       	cpi	r24, 0x04	; 4
     b20:	71 f4       	brne	.+28     	; 0xb3e <rotate_piece+0x20>
     b22:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <R>
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	03 96       	adiw	r24, 0x03	; 3
     b2a:	83 70       	andi	r24, 0x03	; 3
     b2c:	90 78       	andi	r25, 0x80	; 128
     b2e:	99 23       	and	r25, r25
     b30:	24 f4       	brge	.+8      	; 0xb3a <rotate_piece+0x1c>
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	8c 6f       	ori	r24, 0xFC	; 252
     b36:	9f 6f       	ori	r25, 0xFF	; 255
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	98 2f       	mov	r25, r24
     b3c:	0d c0       	rjmp	.+26     	; 0xb58 <rotate_piece+0x3a>
     b3e:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <R>
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	83 70       	andi	r24, 0x03	; 3
     b48:	90 78       	andi	r25, 0x80	; 128
     b4a:	99 23       	and	r25, r25
     b4c:	24 f4       	brge	.+8      	; 0xb56 <rotate_piece+0x38>
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	8c 6f       	ori	r24, 0xFC	; 252
     b52:	9f 6f       	ori	r25, 0xFF	; 255
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	98 2f       	mov	r25, r24
     b58:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <R>
	while (X + NUM(R, 16) > 9) X--;
     b5c:	03 c0       	rjmp	.+6      	; 0xb64 <rotate_piece+0x46>
     b5e:	81 50       	subi	r24, 0x01	; 1
     b60:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <X>
     b64:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <X>
     b68:	49 2f       	mov	r20, r25
	{ 247872, 799248, 247872, 799248 },
	{ 614928, 399424, 615744, 428369 },
};

// extract a 2-bit number from a block entry
static inline i8 NUM(i8 r, i8 n) { return (BLOCK[P][r] >> n) & 3; }
     b6a:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <P>
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	e9 0f       	add	r30, r25
     b7a:	f1 1d       	adc	r31, r1
     b7c:	97 fd       	sbrc	r25, 7
     b7e:	fa 95       	dec	r31
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	e8 5e       	subi	r30, 0xE8	; 232
     b8a:	fe 4f       	sbci	r31, 0xFE	; 254
     b8c:	22 81       	ldd	r18, Z+2	; 0x02
     b8e:	23 70       	andi	r18, 0x03	; 3
	//new_piece();
//}

static void rotate_piece(u8 flag) {
	R = (flag == LEFT)  ? LR(R, 4) : RR(R, 4);
	while (X + NUM(R, 16) > 9) X--;
     b90:	02 2e       	mov	r0, r18
     b92:	00 0c       	add	r0, r0
     b94:	33 0b       	sbc	r19, r19
     b96:	28 0f       	add	r18, r24
     b98:	31 1d       	adc	r19, r1
     b9a:	2a 30       	cpi	r18, 0x0A	; 10
     b9c:	31 05       	cpc	r19, r1
     b9e:	fc f6       	brge	.-66     	; 0xb5e <rotate_piece+0x40>
	if (check_hit(X, Y, R)) {
     ba0:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <Y>
     ba4:	11 df       	rcall	.-478    	; 0x9c8 <check_hit>
     ba6:	88 23       	and	r24, r24
     ba8:	41 f0       	breq	.+16     	; 0xbba <rotate_piece+0x9c>
		X = PX;
     baa:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <PX>
     bae:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <X>
		R = PR;
     bb2:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <PR>
     bb6:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <R>
     bba:	08 95       	ret

00000bbc <move_piece>:
	}
}

static void move_piece(u8 flag)
{
	if (flag & LEFT)
     bbc:	82 ff       	sbrs	r24, 2
     bbe:	12 c0       	rjmp	.+36     	; 0xbe4 <move_piece+0x28>
		(void)(X > 0 && !check_hit(X - 1, Y, R) && X--);
     bc0:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <X>
     bc4:	88 23       	and	r24, r24
     bc6:	c1 f1       	breq	.+112    	; 0xc38 <move_piece+0x7c>
     bc8:	40 91 62 04 	lds	r20, 0x0462	; 0x800462 <R>
     bcc:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <Y>
     bd0:	81 50       	subi	r24, 0x01	; 1
     bd2:	fa de       	rcall	.-524    	; 0x9c8 <check_hit>
     bd4:	81 11       	cpse	r24, r1
     bd6:	30 c0       	rjmp	.+96     	; 0xc38 <move_piece+0x7c>
     bd8:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <X>
     bdc:	81 50       	subi	r24, 0x01	; 1
     bde:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <X>
     be2:	08 95       	ret
	else
		(void)(X + NUM(R, 16) < 9 && !check_hit(X + 1, Y, R) && X++);
     be4:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <X>
     be8:	40 91 62 04 	lds	r20, 0x0462	; 0x800462 <R>
	{ 247872, 799248, 247872, 799248 },
	{ 614928, 399424, 615744, 428369 },
};

// extract a 2-bit number from a block entry
static inline i8 NUM(i8 r, i8 n) { return (BLOCK[P][r] >> n) & 3; }
     bec:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <P>
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	ee 0f       	add	r30, r30
     bf8:	ff 1f       	adc	r31, r31
     bfa:	e4 0f       	add	r30, r20
     bfc:	f1 1d       	adc	r31, r1
     bfe:	47 fd       	sbrc	r20, 7
     c00:	fa 95       	dec	r31
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	e8 5e       	subi	r30, 0xE8	; 232
     c0c:	fe 4f       	sbci	r31, 0xFE	; 254
     c0e:	22 81       	ldd	r18, Z+2	; 0x02
     c10:	23 70       	andi	r18, 0x03	; 3
static void move_piece(u8 flag)
{
	if (flag & LEFT)
		(void)(X > 0 && !check_hit(X - 1, Y, R) && X--);
	else
		(void)(X + NUM(R, 16) < 9 && !check_hit(X + 1, Y, R) && X++);
     c12:	02 2e       	mov	r0, r18
     c14:	00 0c       	add	r0, r0
     c16:	33 0b       	sbc	r19, r19
     c18:	28 0f       	add	r18, r24
     c1a:	31 1d       	adc	r19, r1
     c1c:	29 30       	cpi	r18, 0x09	; 9
     c1e:	31 05       	cpc	r19, r1
     c20:	5c f4       	brge	.+22     	; 0xc38 <move_piece+0x7c>
     c22:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <Y>
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	cf de       	rcall	.-610    	; 0x9c8 <check_hit>
     c2a:	81 11       	cpse	r24, r1
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <move_piece+0x7c>
     c2e:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <X>
     c32:	8f 5f       	subi	r24, 0xFF	; 255
     c34:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <X>
     c38:	08 95       	ret

00000c3a <remove_line>:
	set_piece(PX = X, PY = Y, PR = R, P + 1);
}

// remove line(s) from the board if they're full
static void remove_line() {
	for (u8 row = Y; row <= Y + NUM(R, 18); row++) {
     c3a:	30 91 63 04 	lds	r19, 0x0463	; 0x800463 <Y>
     c3e:	23 2f       	mov	r18, r19
     c40:	4d c0       	rjmp	.+154    	; 0xcdc <remove_line+0xa2>
		
		for (u8 i = 0; i < BOARD_COL; i++)
			if (!BOARD[row][i]) goto CONTINUE;
     c42:	cb 01       	movw	r24, r22
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	fb 01       	movw	r30, r22
     c52:	ee 0f       	add	r30, r30
     c54:	ff 1f       	adc	r31, r31
     c56:	e8 0f       	add	r30, r24
     c58:	f9 1f       	adc	r31, r25
     c5a:	ec 56       	subi	r30, 0x6C	; 108
     c5c:	fc 4f       	sbci	r31, 0xFC	; 252
     c5e:	e4 0f       	add	r30, r20
     c60:	f1 1d       	adc	r31, r1
     c62:	80 81       	ld	r24, Z
     c64:	88 23       	and	r24, r24
     c66:	c9 f1       	breq	.+114    	; 0xcda <remove_line+0xa0>

// remove line(s) from the board if they're full
static void remove_line() {
	for (u8 row = Y; row <= Y + NUM(R, 18); row++) {
		
		for (u8 i = 0; i < BOARD_COL; i++)
     c68:	4f 5f       	subi	r20, 0xFF	; 255
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <remove_line+0x34>
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	4a 30       	cpi	r20, 0x0A	; 10
     c70:	40 f3       	brcs	.-48     	; 0xc42 <remove_line+0x8>
			if (!BOARD[row][i]) goto CONTINUE;

		for (i8 i = row - 1; i > 0; i--)
     c72:	4f ef       	ldi	r20, 0xFF	; 255
     c74:	42 0f       	add	r20, r18
     c76:	26 c0       	rjmp	.+76     	; 0xcc4 <remove_line+0x8a>
			memcpy(&BOARD[i + 1][0], &BOARD[i][0], sizeof(**BOARD) * BOARD_COL);
     c78:	a4 2f       	mov	r26, r20
     c7a:	04 2e       	mov	r0, r20
     c7c:	00 0c       	add	r0, r0
     c7e:	bb 0b       	sbc	r27, r27
     c80:	fd 01       	movw	r30, r26
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	cd 01       	movw	r24, r26
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	e8 0f       	add	r30, r24
     c96:	f9 1f       	adc	r31, r25
     c98:	ec 56       	subi	r30, 0x6C	; 108
     c9a:	fc 4f       	sbci	r31, 0xFC	; 252
     c9c:	11 96       	adiw	r26, 0x01	; 1
     c9e:	cd 01       	movw	r24, r26
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	aa 0f       	add	r26, r26
     ca6:	bb 1f       	adc	r27, r27
     ca8:	aa 0f       	add	r26, r26
     caa:	bb 1f       	adc	r27, r27
     cac:	aa 0f       	add	r26, r26
     cae:	bb 1f       	adc	r27, r27
     cb0:	a8 0f       	add	r26, r24
     cb2:	b9 1f       	adc	r27, r25
     cb4:	ac 56       	subi	r26, 0x6C	; 108
     cb6:	bc 4f       	sbci	r27, 0xFC	; 252
     cb8:	8a e0       	ldi	r24, 0x0A	; 10
     cba:	01 90       	ld	r0, Z+
     cbc:	0d 92       	st	X+, r0
     cbe:	8a 95       	dec	r24
     cc0:	e1 f7       	brne	.-8      	; 0xcba <remove_line+0x80>
	for (u8 row = Y; row <= Y + NUM(R, 18); row++) {
		
		for (u8 i = 0; i < BOARD_COL; i++)
			if (!BOARD[row][i]) goto CONTINUE;

		for (i8 i = row - 1; i > 0; i--)
     cc2:	41 50       	subi	r20, 0x01	; 1
     cc4:	14 16       	cp	r1, r20
     cc6:	c4 f2       	brlt	.-80     	; 0xc78 <remove_line+0x3e>
			memcpy(&BOARD[i + 1][0], &BOARD[i][0], sizeof(**BOARD) * BOARD_COL);

		//memset(&board[0][0], 0, 10);
		SCORE++;
     cc8:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <SCORE>
     ccc:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <SCORE+0x1>
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <SCORE+0x1>
     cd6:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <SCORE>
	set_piece(PX = X, PY = Y, PR = R, P + 1);
}

// remove line(s) from the board if they're full
static void remove_line() {
	for (u8 row = Y; row <= Y + NUM(R, 18); row++) {
     cda:	2f 5f       	subi	r18, 0xFF	; 255
     cdc:	62 2f       	mov	r22, r18
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <R>
	{ 247872, 799248, 247872, 799248 },
	{ 614928, 399424, 615744, 428369 },
};

// extract a 2-bit number from a block entry
static inline i8 NUM(i8 r, i8 n) { return (BLOCK[P][r] >> n) & 3; }
     ce4:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <P>
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	ee 0f       	add	r30, r30
     cec:	ff 1f       	adc	r31, r31
     cee:	ee 0f       	add	r30, r30
     cf0:	ff 1f       	adc	r31, r31
     cf2:	e8 0f       	add	r30, r24
     cf4:	f1 1d       	adc	r31, r1
     cf6:	87 fd       	sbrc	r24, 7
     cf8:	fa 95       	dec	r31
     cfa:	ee 0f       	add	r30, r30
     cfc:	ff 1f       	adc	r31, r31
     cfe:	ee 0f       	add	r30, r30
     d00:	ff 1f       	adc	r31, r31
     d02:	e8 5e       	subi	r30, 0xE8	; 232
     d04:	fe 4f       	sbci	r31, 0xFE	; 254
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
     d0a:	a2 81       	ldd	r26, Z+2	; 0x02
     d0c:	b3 81       	ldd	r27, Z+3	; 0x03
     d0e:	07 2e       	mov	r0, r23
     d10:	72 e1       	ldi	r23, 0x12	; 18
     d12:	b6 95       	lsr	r27
     d14:	a7 95       	ror	r26
     d16:	97 95       	ror	r25
     d18:	87 95       	ror	r24
     d1a:	7a 95       	dec	r23
     d1c:	d1 f7       	brne	.-12     	; 0xd12 <remove_line+0xd8>
     d1e:	70 2d       	mov	r23, r0
     d20:	83 70       	andi	r24, 0x03	; 3
	set_piece(PX = X, PY = Y, PR = R, P + 1);
}

// remove line(s) from the board if they're full
static void remove_line() {
	for (u8 row = Y; row <= Y + NUM(R, 18); row++) {
     d22:	08 2e       	mov	r0, r24
     d24:	00 0c       	add	r0, r0
     d26:	99 0b       	sbc	r25, r25
     d28:	83 0f       	add	r24, r19
     d2a:	91 1d       	adc	r25, r1
     d2c:	86 17       	cp	r24, r22
     d2e:	97 07       	cpc	r25, r23
     d30:	0c f0       	brlt	.+2      	; 0xd34 <remove_line+0xfa>
     d32:	9c cf       	rjmp	.-200    	; 0xc6c <remove_line+0x32>
		//memset(&board[0][0], 0, 10);
		SCORE++;

		CONTINUE:;
	}
}
     d34:	08 95       	ret

00000d36 <new_piece>:
// extract a 2-bit number from a block entry
static inline i8 NUM(i8 r, i8 n) { return (BLOCK[P][r] >> n) & 3; }


// create a new piece, don't remove old one (it has landed and should stick)
static void new_piece() {
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
	int rnum = rand();
     d3a:	50 d2       	rcall	.+1184   	; 0x11dc <rand>
     d3c:	ec 01       	movw	r28, r24
	Y = PY = 0;
     d3e:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <PY>
     d42:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <Y>
	P = rnum % 7;
     d46:	67 e0       	ldi	r22, 0x07	; 7
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	cb d1       	rcall	.+918    	; 0x10e2 <__divmodhi4>
     d4c:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <P>
	R = PR = rnum % 4;
     d50:	9e 01       	movw	r18, r28
     d52:	23 70       	andi	r18, 0x03	; 3
     d54:	30 78       	andi	r19, 0x80	; 128
     d56:	33 23       	and	r19, r19
     d58:	34 f4       	brge	.+12     	; 0xd66 <new_piece+0x30>
     d5a:	21 50       	subi	r18, 0x01	; 1
     d5c:	31 09       	sbc	r19, r1
     d5e:	2c 6f       	ori	r18, 0xFC	; 252
     d60:	3f 6f       	ori	r19, 0xFF	; 255
     d62:	2f 5f       	subi	r18, 0xFF	; 255
     d64:	3f 4f       	sbci	r19, 0xFF	; 255
     d66:	20 93 5f 04 	sts	0x045F, r18	; 0x80045f <PR>
     d6a:	20 93 62 04 	sts	0x0462, r18	; 0x800462 <R>
	{ 247872, 799248, 247872, 799248 },
	{ 614928, 399424, 615744, 428369 },
};

// extract a 2-bit number from a block entry
static inline i8 NUM(i8 r, i8 n) { return (BLOCK[P][r] >> n) & 3; }
     d6e:	e8 2f       	mov	r30, r24
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	ee 0f       	add	r30, r30
     d74:	ff 1f       	adc	r31, r31
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	e2 0f       	add	r30, r18
     d7c:	f1 1d       	adc	r31, r1
     d7e:	27 fd       	sbrc	r18, 7
     d80:	fa 95       	dec	r31
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	e8 5e       	subi	r30, 0xE8	; 232
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	83 70       	andi	r24, 0x03	; 3
static void new_piece() {
	int rnum = rand();
	Y = PY = 0;
	P = rnum % 7;
	R = PR = rnum % 4;
	X = PX = rnum % (BOARD_COL - NUM(R, 16));
     d92:	6a e0       	ldi	r22, 0x0A	; 10
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	68 1b       	sub	r22, r24
     d98:	71 09       	sbc	r23, r1
     d9a:	ce 01       	movw	r24, r28
     d9c:	a2 d1       	rcall	.+836    	; 0x10e2 <__divmodhi4>
     d9e:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <PX>
     da2:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <X>
}
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <draw_score>:
}

#define SCORE_ROW (BOARD_END_ROW + 2)
#define SCORE_COL(i) (DMAT_COL - DMAT_DIGIT_RATIO_W - (i) * (DMAT_DIGIT_RATIO_W + 1))

void draw_score(coord_t row) {
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	d8 2f       	mov	r29, r24
	u16 score = SCORE;
     db8:	e0 90 5c 04 	lds	r14, 0x045C	; 0x80045c <SCORE>
     dbc:	f0 90 5d 04 	lds	r15, 0x045D	; 0x80045d <SCORE+0x1>
	for (coord_t i = 0; i < 4; i++) {
     dc0:	c0 e0       	ldi	r28, 0x00	; 0
     dc2:	2e c0       	rjmp	.+92     	; 0xe20 <draw_score+0x74>
		DMAT_draw_digit_bit(row, SCORE_COL(i), score % 10, CR, 1);
     dc4:	97 01       	movw	r18, r14
     dc6:	ad ec       	ldi	r26, 0xCD	; 205
     dc8:	bc ec       	ldi	r27, 0xCC	; 204
     dca:	9e d1       	rcall	.+828    	; 0x1108 <__umulhisi3>
     dcc:	96 95       	lsr	r25
     dce:	87 95       	ror	r24
     dd0:	96 95       	lsr	r25
     dd2:	87 95       	ror	r24
     dd4:	96 95       	lsr	r25
     dd6:	87 95       	ror	r24
     dd8:	ac 01       	movw	r20, r24
     dda:	44 0f       	add	r20, r20
     ddc:	55 1f       	adc	r21, r21
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	84 0f       	add	r24, r20
     dec:	95 1f       	adc	r25, r21
     dee:	28 1b       	sub	r18, r24
     df0:	39 0b       	sbc	r19, r25
     df2:	c9 01       	movw	r24, r18
     df4:	9c 2f       	mov	r25, r28
     df6:	99 0f       	add	r25, r25
     df8:	99 0f       	add	r25, r25
     dfa:	6d e0       	ldi	r22, 0x0D	; 13
     dfc:	69 1b       	sub	r22, r25
     dfe:	01 e0       	ldi	r16, 0x01	; 1
     e00:	21 e0       	ldi	r18, 0x01	; 1
     e02:	48 2f       	mov	r20, r24
     e04:	8d 2f       	mov	r24, r29
     e06:	82 da       	rcall	.-2812   	; 0x30c <DMAT_draw_digit_bit>
		score /= 10;
     e08:	97 01       	movw	r18, r14
     e0a:	ad ec       	ldi	r26, 0xCD	; 205
     e0c:	bc ec       	ldi	r27, 0xCC	; 204
     e0e:	7c d1       	rcall	.+760    	; 0x1108 <__umulhisi3>
     e10:	7c 01       	movw	r14, r24
     e12:	f6 94       	lsr	r15
     e14:	e7 94       	ror	r14
     e16:	f6 94       	lsr	r15
     e18:	e7 94       	ror	r14
     e1a:	f6 94       	lsr	r15
     e1c:	e7 94       	ror	r14
#define SCORE_ROW (BOARD_END_ROW + 2)
#define SCORE_COL(i) (DMAT_COL - DMAT_DIGIT_RATIO_W - (i) * (DMAT_DIGIT_RATIO_W + 1))

void draw_score(coord_t row) {
	u16 score = SCORE;
	for (coord_t i = 0; i < 4; i++) {
     e1e:	cf 5f       	subi	r28, 0xFF	; 255
     e20:	c4 30       	cpi	r28, 0x04	; 4
     e22:	80 f2       	brcs	.-96     	; 0xdc4 <draw_score+0x18>
		DMAT_draw_digit_bit(row, SCORE_COL(i), score % 10, CR, 1);
		score /= 10;
	}
}
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	0f 91       	pop	r16
     e2a:	ff 90       	pop	r15
     e2c:	ef 90       	pop	r14
     e2e:	08 95       	ret

00000e30 <frame>:

// draw the board and score
static void frame()
{
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
	DMAT_clear();
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	b1 db       	rcall	.-2206   	; 0x59a <LEDMAT_fill_rgb_bit>

#define BOARD_END_ROW (BOARD_START_ROW + BOARD_ROW)
#define BOARD_END_COL (BOARD_START_COL + BOARD_COL)

static inline void draw_border() {
	for (coord_t c = BOARD_START_COL - 1; c < BOARD_END_COL + 1; c++) {
     e38:	d2 e0       	ldi	r29, 0x02	; 2
     e3a:	0b c0       	rjmp	.+22     	; 0xe52 <frame+0x22>
		LEDMAT_swap_buffer();
		while (1);
	}
#endif
	
	LEDMAT_set_rgb_bit((LEDMAT_ROW - 1) - col, row, rgb);
     e3c:	cf e0       	ldi	r28, 0x0F	; 15
     e3e:	cd 1b       	sub	r28, r29
     e40:	47 e0       	ldi	r20, 0x07	; 7
     e42:	62 e0       	ldi	r22, 0x02	; 2
     e44:	8c 2f       	mov	r24, r28
     e46:	61 db       	rcall	.-2366   	; 0x50a <LEDMAT_set_rgb_bit>
     e48:	47 e0       	ldi	r20, 0x07	; 7
     e4a:	67 e1       	ldi	r22, 0x17	; 23
     e4c:	8c 2f       	mov	r24, r28
     e4e:	5d db       	rcall	.-2374   	; 0x50a <LEDMAT_set_rgb_bit>
     e50:	df 5f       	subi	r29, 0xFF	; 255
     e52:	de 30       	cpi	r29, 0x0E	; 14
     e54:	98 f3       	brcs	.-26     	; 0xe3c <frame+0xc>
     e56:	c2 e0       	ldi	r28, 0x02	; 2
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <frame+0x3c>
     e5a:	47 e0       	ldi	r20, 0x07	; 7
     e5c:	6c 2f       	mov	r22, r28
     e5e:	8d e0       	ldi	r24, 0x0D	; 13
     e60:	54 db       	rcall	.-2392   	; 0x50a <LEDMAT_set_rgb_bit>
     e62:	47 e0       	ldi	r20, 0x07	; 7
     e64:	6c 2f       	mov	r22, r28
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	50 db       	rcall	.-2400   	; 0x50a <LEDMAT_set_rgb_bit>
		DMAT_set_rgb_bit(BOARD_START_ROW - 1, c, CG | CR | CB);
		DMAT_set_rgb_bit(BOARD_END_ROW, c, CG | CR | CB);
	}
	
	for (coord_t r = BOARD_START_ROW - 1; r < BOARD_END_ROW + 1; r++) {
     e6a:	cf 5f       	subi	r28, 0xFF	; 255
     e6c:	c8 31       	cpi	r28, 0x18	; 24
     e6e:	a8 f3       	brcs	.-22     	; 0xe5a <frame+0x2a>
		DMAT_set_rgb_bit(r, BOARD_END_COL, CG | CR | CB);
	}
}

static inline void draw_board() {
	for (coord_t r = 0; r < BOARD_ROW; r++)
     e70:	d0 e0       	ldi	r29, 0x00	; 0
     e72:	1f c0       	rjmp	.+62     	; 0xeb2 <frame+0x82>
	for (coord_t c = 0; c < BOARD_COL; c++)
	DMAT_set_rgb_bit(BOARD_START_ROW + r, BOARD_START_COL + c, BOARD[r][c]);
     e74:	8d 2f       	mov	r24, r29
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	fc 01       	movw	r30, r24
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	e8 0f       	add	r30, r24
     e8c:	f9 1f       	adc	r31, r25
     e8e:	ec 56       	subi	r30, 0x6C	; 108
     e90:	fc 4f       	sbci	r31, 0xFC	; 252
     e92:	ec 0f       	add	r30, r28
     e94:	f1 1d       	adc	r31, r1
     e96:	40 81       	ld	r20, Z
     e98:	93 e0       	ldi	r25, 0x03	; 3
     e9a:	9c 0f       	add	r25, r28
     e9c:	63 e0       	ldi	r22, 0x03	; 3
     e9e:	6d 0f       	add	r22, r29
     ea0:	8f e0       	ldi	r24, 0x0F	; 15
     ea2:	89 1b       	sub	r24, r25
     ea4:	32 db       	rcall	.-2460   	; 0x50a <LEDMAT_set_rgb_bit>
	}
}

static inline void draw_board() {
	for (coord_t r = 0; r < BOARD_ROW; r++)
	for (coord_t c = 0; c < BOARD_COL; c++)
     ea6:	cf 5f       	subi	r28, 0xFF	; 255
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <frame+0x7c>
		DMAT_set_rgb_bit(r, BOARD_END_COL, CG | CR | CB);
	}
}

static inline void draw_board() {
	for (coord_t r = 0; r < BOARD_ROW; r++)
     eaa:	c0 e0       	ldi	r28, 0x00	; 0
	for (coord_t c = 0; c < BOARD_COL; c++)
     eac:	ca 30       	cpi	r28, 0x0A	; 10
		DMAT_set_rgb_bit(r, BOARD_END_COL, CG | CR | CB);
	}
}

static inline void draw_board() {
	for (coord_t r = 0; r < BOARD_ROW; r++)
     eae:	10 f3       	brcs	.-60     	; 0xe74 <frame+0x44>
     eb0:	df 5f       	subi	r29, 0xFF	; 255
     eb2:	d4 31       	cpi	r29, 0x14	; 20
{
	DMAT_clear();
	
	draw_border();
	draw_board();
	draw_score(SCORE_ROW);
     eb4:	d0 f3       	brcs	.-12     	; 0xeaa <frame+0x7a>
     eb6:	89 e1       	ldi	r24, 0x19	; 25
     eb8:	79 df       	rcall	.-270    	; 0xdac <draw_score>
}


#define DMAT_CP	_BV(0) // copy(copy Front Buffer to Back Buffer)
static inline void DMAT_update(u8 flags) {
	LEDMAT_swap_buffer(); // back buffer <=> front buffer
     eba:	0b db       	rcall	.-2538   	; 0x4d2 <LEDMAT_swap_buffer>
     ebc:	df 91       	pop	r29

	DMAT_update(0);
}
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <tetris_process_input>:
     ec2:	8f 92       	push	r8
// ==================================================================

#define LnR (LEFT | RIGHT)
static u8 PREV_INPUT;
void tetris_process_input(u8 input)
{
     ec4:	9f 92       	push	r9
     ec6:	af 92       	push	r10
     ec8:	bf 92       	push	r11
     eca:	cf 92       	push	r12
     ecc:	df 92       	push	r13
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	18 2f       	mov	r17, r24
	static u32 WAIT_TIME_BTN_LR;

	u8 changed = 0;
	
	/* LEFT & RIGHT: horizontal move */
	if ((LnR & input) == LnR) input &= ~LnR;
     eda:	8c 70       	andi	r24, 0x0C	; 12
     edc:	8c 30       	cpi	r24, 0x0C	; 12
     ede:	09 f4       	brne	.+2      	; 0xee2 <tetris_process_input+0x20>
     ee0:	13 7f       	andi	r17, 0xF3	; 243

	if ( ~PREV_INPUT & input & LnR ) {
     ee2:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <PREV_INPUT>
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	80 95       	com	r24
     eea:	90 95       	com	r25
     eec:	c1 2f       	mov	r28, r17
     eee:	d0 e0       	ldi	r29, 0x00	; 0
     ef0:	8c 23       	and	r24, r28
     ef2:	9d 23       	and	r25, r29
     ef4:	8c 70       	andi	r24, 0x0C	; 12
     ef6:	99 27       	eor	r25, r25
     ef8:	89 2b       	or	r24, r25
     efa:	c9 f0       	breq	.+50     	; 0xf2e <tetris_process_input+0x6c>
		WAIT_TIME_BTN_LR = LR_SEMICONT_TERM;
     efc:	8c e2       	ldi	r24, 0x2C	; 44
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	a0 e0       	ldi	r26, 0x00	; 0
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <WAIT_TIME_BTN_LR.2053>
     f08:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <WAIT_TIME_BTN_LR.2053+0x1>
     f0c:	a0 93 91 03 	sts	0x0391, r26	; 0x800391 <WAIT_TIME_BTN_LR.2053+0x2>
     f10:	b0 93 92 03 	sts	0x0392, r27	; 0x800392 <WAIT_TIME_BTN_LR.2053+0x3>
		PREV_MS_BTN_LR = millis();
     f14:	da d0       	rcall	.+436    	; 0x10ca <millis>
     f16:	60 93 8b 03 	sts	0x038B, r22	; 0x80038b <PREV_MS_BTN_LR.2052>
     f1a:	70 93 8c 03 	sts	0x038C, r23	; 0x80038c <PREV_MS_BTN_LR.2052+0x1>
     f1e:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <PREV_MS_BTN_LR.2052+0x2>
     f22:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <PREV_MS_BTN_LR.2052+0x3>

		move_piece(input);
     f26:	81 2f       	mov	r24, r17
     f28:	49 de       	rcall	.-878    	; 0xbbc <move_piece>
		
		changed = 1;
     f2a:	21 e0       	ldi	r18, 0x01	; 1
     f2c:	3e c0       	rjmp	.+124    	; 0xfaa <tetris_process_input+0xe8>
	}
	else if ( input & LnR ) {
     f2e:	81 2f       	mov	r24, r17
     f30:	8c 70       	andi	r24, 0x0C	; 12
		u32 curr = millis();
     f32:	c1 f1       	breq	.+112    	; 0xfa4 <tetris_process_input+0xe2>
     f34:	ca d0       	rcall	.+404    	; 0x10ca <millis>
		
		if (TIME_OUTI(curr, PREV_MS_BTN_LR, WAIT_TIME_BTN_LR)) {
     f36:	80 90 8b 03 	lds	r8, 0x038B	; 0x80038b <PREV_MS_BTN_LR.2052>
     f3a:	90 90 8c 03 	lds	r9, 0x038C	; 0x80038c <PREV_MS_BTN_LR.2052+0x1>
     f3e:	a0 90 8d 03 	lds	r10, 0x038D	; 0x80038d <PREV_MS_BTN_LR.2052+0x2>
     f42:	b0 90 8e 03 	lds	r11, 0x038E	; 0x80038e <PREV_MS_BTN_LR.2052+0x3>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	88 19       	sub	r24, r8
     f4c:	99 09       	sbc	r25, r9
     f4e:	aa 09       	sbc	r26, r10
     f50:	bb 09       	sbc	r27, r11
     f52:	c0 90 8f 03 	lds	r12, 0x038F	; 0x80038f <WAIT_TIME_BTN_LR.2053>
     f56:	d0 90 90 03 	lds	r13, 0x0390	; 0x800390 <WAIT_TIME_BTN_LR.2053+0x1>
     f5a:	e0 90 91 03 	lds	r14, 0x0391	; 0x800391 <WAIT_TIME_BTN_LR.2053+0x2>
     f5e:	f0 90 92 03 	lds	r15, 0x0392	; 0x800392 <WAIT_TIME_BTN_LR.2053+0x3>
     f62:	8c 15       	cp	r24, r12
     f64:	9d 05       	cpc	r25, r13
     f66:	ae 05       	cpc	r26, r14
     f68:	bf 05       	cpc	r27, r15
     f6a:	f0 f0       	brcs	.+60     	; 0xfa8 <tetris_process_input+0xe6>
     f6c:	c8 0c       	add	r12, r8
     f6e:	d9 1c       	adc	r13, r9
     f70:	ea 1c       	adc	r14, r10
     f72:	fb 1c       	adc	r15, r11
     f74:	c0 92 8b 03 	sts	0x038B, r12	; 0x80038b <PREV_MS_BTN_LR.2052>
     f78:	d0 92 8c 03 	sts	0x038C, r13	; 0x80038c <PREV_MS_BTN_LR.2052+0x1>
     f7c:	e0 92 8d 03 	sts	0x038D, r14	; 0x80038d <PREV_MS_BTN_LR.2052+0x2>
     f80:	f0 92 8e 03 	sts	0x038E, r15	; 0x80038e <PREV_MS_BTN_LR.2052+0x3>
			WAIT_TIME_BTN_LR = LR_SEMICONT_CONT;
     f84:	8c e3       	ldi	r24, 0x3C	; 60
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a0 e0       	ldi	r26, 0x00	; 0
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <WAIT_TIME_BTN_LR.2053>
     f90:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <WAIT_TIME_BTN_LR.2053+0x1>
     f94:	a0 93 91 03 	sts	0x0391, r26	; 0x800391 <WAIT_TIME_BTN_LR.2053+0x2>
     f98:	b0 93 92 03 	sts	0x0392, r27	; 0x800392 <WAIT_TIME_BTN_LR.2053+0x3>
			move_piece(input);
     f9c:	81 2f       	mov	r24, r17
     f9e:	0e de       	rcall	.-996    	; 0xbbc <move_piece>
			changed = 1;
     fa0:	21 e0       	ldi	r18, 0x01	; 1
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <tetris_process_input+0xe8>
void tetris_process_input(u8 input)
{
	static u32 PREV_MS_BTN_LR;
	static u32 WAIT_TIME_BTN_LR;

	u8 changed = 0;
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <tetris_process_input+0xe8>
     fa8:	20 e0       	ldi	r18, 0x00	; 0
			changed = 1;
		}
	}
	
	/* UP: rotate to the right */
	if ( ~PREV_INPUT & input & UP )
     faa:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <PREV_INPUT>
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	80 95       	com	r24
     fb2:	90 95       	com	r25
     fb4:	8c 23       	and	r24, r28
     fb6:	9d 23       	and	r25, r29
     fb8:	80 ff       	sbrs	r24, 0
		rotate_piece(RIGHT), changed = 1;
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <tetris_process_input+0x100>
     fbc:	88 e0       	ldi	r24, 0x08	; 8
     fbe:	af dd       	rcall	.-1186   	; 0xb1e <rotate_piece>
     fc0:	21 e0       	ldi	r18, 0x01	; 1

	/* DOWN: rotate to the left */
	if ( ~PREV_INPUT & input & DOWN ) {
     fc2:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <PREV_INPUT>
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	80 95       	com	r24
     fca:	90 95       	com	r25
     fcc:	8c 23       	and	r24, r28
     fce:	9d 23       	and	r25, r29
     fd0:	81 ff       	sbrs	r24, 1
		rotate_piece(LEFT), changed = 1;
     fd2:	03 c0       	rjmp	.+6      	; 0xfda <tetris_process_input+0x118>
     fd4:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	if (changed) {
     fd6:	a3 dd       	rcall	.-1210   	; 0xb1e <rotate_piece>
     fd8:	21 e0       	ldi	r18, 0x01	; 1
		update_piece();
     fda:	22 23       	and	r18, r18
     fdc:	11 f0       	breq	.+4      	; 0xfe2 <tetris_process_input+0x120>
		frame();
     fde:	db dc       	rcall	.-1610   	; 0x996 <update_piece>
     fe0:	27 df       	rcall	.-434    	; 0xe30 <frame>
	}
	
	PREV_INPUT = input;
     fe2:	10 93 93 03 	sts	0x0393, r17	; 0x800393 <PREV_INPUT>
}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	cf 90       	pop	r12
     ff4:	bf 90       	pop	r11
     ff6:	af 90       	pop	r10
     ff8:	9f 90       	pop	r9
     ffa:	8f 90       	pop	r8
     ffc:	08 95       	ret

00000ffe <tetris_do_tick>:

u8 tetris_do_tick()
{
	if (check_hit(X, Y + 1, R)) {
     ffe:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <Y>
    1002:	6f 5f       	subi	r22, 0xFF	; 255
    1004:	40 91 62 04 	lds	r20, 0x0462	; 0x800462 <R>
    1008:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <X>
    100c:	dd dc       	rcall	.-1606   	; 0x9c8 <check_hit>
    100e:	88 23       	and	r24, r24
    1010:	39 f0       	breq	.+14     	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
		if (!Y) return 0;
    1012:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <Y>
    1016:	88 23       	and	r24, r24
		remove_line();
    1018:	59 f0       	breq	.+22     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
		new_piece();
    101a:	0f de       	rcall	.-994    	; 0xc3a <remove_line>
    101c:	8c de       	rcall	.-744    	; 0xd36 <new_piece>
    101e:	06 c0       	rjmp	.+12     	; 0x102c <__DATA_REGION_LENGTH__+0x2c>
	} else {
		Y++;
    1020:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <Y>
    1024:	8f 5f       	subi	r24, 0xFF	; 255
		update_piece();
    1026:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <Y>
	}
	
	frame();
    102a:	b5 dc       	rcall	.-1686   	; 0x996 <update_piece>
    102c:	01 df       	rcall	.-510    	; 0xe30 <frame>
	
	return 1;
    102e:	81 e0       	ldi	r24, 0x01	; 1
}
    1030:	08 95       	ret

00001032 <tetris_init>:

void tetris_init(int seed)
{
	srand(seed);
    1032:	d7 d0       	rcall	.+430    	; 0x11e2 <srand>
	
	memset((void*)BOARD, 0, sizeof(BOARD));
    1034:	88 ec       	ldi	r24, 0xC8	; 200
    1036:	e4 e9       	ldi	r30, 0x94	; 148
    1038:	f3 e0       	ldi	r31, 0x03	; 3
    103a:	df 01       	movw	r26, r30
    103c:	1d 92       	st	X+, r1
    103e:	8a 95       	dec	r24
	new_piece();
    1040:	e9 f7       	brne	.-6      	; 0x103c <tetris_init+0xa>
    1042:	79 de       	rcall	.-782    	; 0xd36 <new_piece>
	SCORE = 0;
    1044:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <SCORE+0x1>
    1048:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <SCORE>
	PREV_INPUT = 0;
    104c:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <PREV_INPUT>
    1050:	08 95       	ret

00001052 <TimeBase_inc_tick>:

static volatile uint32_t timer0_millis;
static volatile uint16_t timer0_fract;

void TimeBase_inc_tick()
{
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
	uint32_t m = timer0_millis;
    105a:	c0 90 67 04 	lds	r12, 0x0467	; 0x800467 <timer0_millis>
    105e:	d0 90 68 04 	lds	r13, 0x0468	; 0x800468 <timer0_millis+0x1>
    1062:	e0 90 69 04 	lds	r14, 0x0469	; 0x800469 <timer0_millis+0x2>
    1066:	f0 90 6a 04 	lds	r15, 0x046A	; 0x80046a <timer0_millis+0x3>
	uint16_t f = timer0_fract;
    106a:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <timer0_fract>
    106e:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <timer0_fract+0x1>
	
	m++, f += 24;
    1072:	b7 01       	movw	r22, r14
    1074:	a6 01       	movw	r20, r12
    1076:	4f 5f       	subi	r20, 0xFF	; 255
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	6f 4f       	sbci	r22, 0xFF	; 255
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	c9 01       	movw	r24, r18
    1080:	48 96       	adiw	r24, 0x18	; 24
	if (f >= 1000) m++, f -= 1000;
    1082:	88 3e       	cpi	r24, 0xE8	; 232
    1084:	e3 e0       	ldi	r30, 0x03	; 3
    1086:	9e 07       	cpc	r25, r30
    1088:	40 f0       	brcs	.+16     	; 0x109a <TimeBase_inc_tick+0x48>
    108a:	b7 01       	movw	r22, r14
    108c:	a6 01       	movw	r20, r12
    108e:	4e 5f       	subi	r20, 0xFE	; 254
    1090:	5f 4f       	sbci	r21, 0xFF	; 255
    1092:	6f 4f       	sbci	r22, 0xFF	; 255
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	88 5e       	subi	r24, 0xE8	; 232
    1098:	93 40       	sbci	r25, 0x03	; 3
	
	timer0_millis = m;
    109a:	40 93 67 04 	sts	0x0467, r20	; 0x800467 <timer0_millis>
    109e:	50 93 68 04 	sts	0x0468, r21	; 0x800468 <timer0_millis+0x1>
    10a2:	60 93 69 04 	sts	0x0469, r22	; 0x800469 <timer0_millis+0x2>
    10a6:	70 93 6a 04 	sts	0x046A, r23	; 0x80046a <timer0_millis+0x3>
	timer0_fract = f;
    10aa:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <timer0_fract+0x1>
    10ae:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <timer0_fract>
}
    10b2:	ff 90       	pop	r15
    10b4:	ef 90       	pop	r14
    10b6:	df 90       	pop	r13
    10b8:	cf 90       	pop	r12
    10ba:	08 95       	ret

000010bc <TimeBase_init>:

void TimeBase_init()
{
	TCCR0 |= _BV(CS02); // clock select: 64
    10bc:	83 b7       	in	r24, 0x33	; 51
    10be:	84 60       	ori	r24, 0x04	; 4
    10c0:	83 bf       	out	0x33, r24	; 51
	TIMSK |= _BV(TOIE0); // overflow interrupt enable
    10c2:	87 b7       	in	r24, 0x37	; 55
    10c4:	81 60       	ori	r24, 0x01	; 1
    10c6:	87 bf       	out	0x37, r24	; 55
    10c8:	08 95       	ret

000010ca <millis>:

uint32_t millis()
{
	uint32_t m;
	
	uint8_t oldSREG = SREG;
    10ca:	2f b7       	in	r18, 0x3f	; 63
	
	cli();
    10cc:	f8 94       	cli
	m = timer0_millis;
    10ce:	60 91 67 04 	lds	r22, 0x0467	; 0x800467 <timer0_millis>
    10d2:	70 91 68 04 	lds	r23, 0x0468	; 0x800468 <timer0_millis+0x1>
    10d6:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <timer0_millis+0x2>
    10da:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <timer0_millis+0x3>
	SREG = oldSREG;
    10de:	2f bf       	out	0x3f, r18	; 63
	
	return m;
    10e0:	08 95       	ret

000010e2 <__divmodhi4>:
    10e2:	97 fb       	bst	r25, 7
    10e4:	07 2e       	mov	r0, r23
    10e6:	16 f4       	brtc	.+4      	; 0x10ec <__divmodhi4+0xa>
    10e8:	00 94       	com	r0
    10ea:	06 d0       	rcall	.+12     	; 0x10f8 <__divmodhi4_neg1>
    10ec:	77 fd       	sbrc	r23, 7
    10ee:	08 d0       	rcall	.+16     	; 0x1100 <__divmodhi4_neg2>
    10f0:	1a d0       	rcall	.+52     	; 0x1126 <__udivmodhi4>
    10f2:	07 fc       	sbrc	r0, 7
    10f4:	05 d0       	rcall	.+10     	; 0x1100 <__divmodhi4_neg2>
    10f6:	3e f4       	brtc	.+14     	; 0x1106 <__divmodhi4_exit>

000010f8 <__divmodhi4_neg1>:
    10f8:	90 95       	com	r25
    10fa:	81 95       	neg	r24
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	08 95       	ret

00001100 <__divmodhi4_neg2>:
    1100:	70 95       	com	r23
    1102:	61 95       	neg	r22
    1104:	7f 4f       	sbci	r23, 0xFF	; 255

00001106 <__divmodhi4_exit>:
    1106:	08 95       	ret

00001108 <__umulhisi3>:
    1108:	a2 9f       	mul	r26, r18
    110a:	b0 01       	movw	r22, r0
    110c:	b3 9f       	mul	r27, r19
    110e:	c0 01       	movw	r24, r0
    1110:	a3 9f       	mul	r26, r19
    1112:	70 0d       	add	r23, r0
    1114:	81 1d       	adc	r24, r1
    1116:	11 24       	eor	r1, r1
    1118:	91 1d       	adc	r25, r1
    111a:	b2 9f       	mul	r27, r18
    111c:	70 0d       	add	r23, r0
    111e:	81 1d       	adc	r24, r1
    1120:	11 24       	eor	r1, r1
    1122:	91 1d       	adc	r25, r1
    1124:	08 95       	ret

00001126 <__udivmodhi4>:
    1126:	aa 1b       	sub	r26, r26
    1128:	bb 1b       	sub	r27, r27
    112a:	51 e1       	ldi	r21, 0x11	; 17
    112c:	07 c0       	rjmp	.+14     	; 0x113c <__udivmodhi4_ep>

0000112e <__udivmodhi4_loop>:
    112e:	aa 1f       	adc	r26, r26
    1130:	bb 1f       	adc	r27, r27
    1132:	a6 17       	cp	r26, r22
    1134:	b7 07       	cpc	r27, r23
    1136:	10 f0       	brcs	.+4      	; 0x113c <__udivmodhi4_ep>
    1138:	a6 1b       	sub	r26, r22
    113a:	b7 0b       	sbc	r27, r23

0000113c <__udivmodhi4_ep>:
    113c:	88 1f       	adc	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	5a 95       	dec	r21
    1142:	a9 f7       	brne	.-22     	; 0x112e <__udivmodhi4_loop>
    1144:	80 95       	com	r24
    1146:	90 95       	com	r25
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	08 95       	ret

0000114e <do_rand>:
    114e:	8f 92       	push	r8
    1150:	9f 92       	push	r9
    1152:	af 92       	push	r10
    1154:	bf 92       	push	r11
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	ec 01       	movw	r28, r24
    1164:	68 81       	ld	r22, Y
    1166:	79 81       	ldd	r23, Y+1	; 0x01
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	9b 81       	ldd	r25, Y+3	; 0x03
    116c:	61 15       	cp	r22, r1
    116e:	71 05       	cpc	r23, r1
    1170:	81 05       	cpc	r24, r1
    1172:	91 05       	cpc	r25, r1
    1174:	21 f4       	brne	.+8      	; 0x117e <do_rand+0x30>
    1176:	64 e2       	ldi	r22, 0x24	; 36
    1178:	79 ed       	ldi	r23, 0xD9	; 217
    117a:	8b e5       	ldi	r24, 0x5B	; 91
    117c:	97 e0       	ldi	r25, 0x07	; 7
    117e:	2d e1       	ldi	r18, 0x1D	; 29
    1180:	33 ef       	ldi	r19, 0xF3	; 243
    1182:	41 e0       	ldi	r20, 0x01	; 1
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	3f d0       	rcall	.+126    	; 0x1206 <__divmodsi4>
    1188:	49 01       	movw	r8, r18
    118a:	5a 01       	movw	r10, r20
    118c:	9b 01       	movw	r18, r22
    118e:	ac 01       	movw	r20, r24
    1190:	a7 ea       	ldi	r26, 0xA7	; 167
    1192:	b1 e4       	ldi	r27, 0x41	; 65
    1194:	54 d0       	rcall	.+168    	; 0x123e <__muluhisi3>
    1196:	6b 01       	movw	r12, r22
    1198:	7c 01       	movw	r14, r24
    119a:	ac ee       	ldi	r26, 0xEC	; 236
    119c:	b4 ef       	ldi	r27, 0xF4	; 244
    119e:	a5 01       	movw	r20, r10
    11a0:	94 01       	movw	r18, r8
    11a2:	59 d0       	rcall	.+178    	; 0x1256 <__mulohisi3>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	8c 0d       	add	r24, r12
    11aa:	9d 1d       	adc	r25, r13
    11ac:	ae 1d       	adc	r26, r14
    11ae:	bf 1d       	adc	r27, r15
    11b0:	b7 ff       	sbrs	r27, 7
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <do_rand+0x6c>
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	a1 09       	sbc	r26, r1
    11b8:	b0 48       	sbci	r27, 0x80	; 128
    11ba:	88 83       	st	Y, r24
    11bc:	99 83       	std	Y+1, r25	; 0x01
    11be:	aa 83       	std	Y+2, r26	; 0x02
    11c0:	bb 83       	std	Y+3, r27	; 0x03
    11c2:	9f 77       	andi	r25, 0x7F	; 127
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	bf 90       	pop	r11
    11d2:	af 90       	pop	r10
    11d4:	9f 90       	pop	r9
    11d6:	8f 90       	pop	r8
    11d8:	08 95       	ret

000011da <rand_r>:
    11da:	b9 cf       	rjmp	.-142    	; 0x114e <do_rand>

000011dc <rand>:
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	b6 cf       	rjmp	.-148    	; 0x114e <do_rand>

000011e2 <srand>:
    11e2:	a0 e0       	ldi	r26, 0x00	; 0
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    11ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    11ee:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    11f2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    11f6:	08 95       	ret

000011f8 <memset>:
    11f8:	dc 01       	movw	r26, r24
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <memset+0x6>
    11fc:	6d 93       	st	X+, r22
    11fe:	41 50       	subi	r20, 0x01	; 1
    1200:	50 40       	sbci	r21, 0x00	; 0
    1202:	e0 f7       	brcc	.-8      	; 0x11fc <memset+0x4>
    1204:	08 95       	ret

00001206 <__divmodsi4>:
    1206:	05 2e       	mov	r0, r21
    1208:	97 fb       	bst	r25, 7
    120a:	16 f4       	brtc	.+4      	; 0x1210 <__divmodsi4+0xa>
    120c:	00 94       	com	r0
    120e:	0f d0       	rcall	.+30     	; 0x122e <__negsi2>
    1210:	57 fd       	sbrc	r21, 7
    1212:	05 d0       	rcall	.+10     	; 0x121e <__divmodsi4_neg2>
    1214:	24 d0       	rcall	.+72     	; 0x125e <__udivmodsi4>
    1216:	07 fc       	sbrc	r0, 7
    1218:	02 d0       	rcall	.+4      	; 0x121e <__divmodsi4_neg2>
    121a:	46 f4       	brtc	.+16     	; 0x122c <__divmodsi4_exit>
    121c:	08 c0       	rjmp	.+16     	; 0x122e <__negsi2>

0000121e <__divmodsi4_neg2>:
    121e:	50 95       	com	r21
    1220:	40 95       	com	r20
    1222:	30 95       	com	r19
    1224:	21 95       	neg	r18
    1226:	3f 4f       	sbci	r19, 0xFF	; 255
    1228:	4f 4f       	sbci	r20, 0xFF	; 255
    122a:	5f 4f       	sbci	r21, 0xFF	; 255

0000122c <__divmodsi4_exit>:
    122c:	08 95       	ret

0000122e <__negsi2>:
    122e:	90 95       	com	r25
    1230:	80 95       	com	r24
    1232:	70 95       	com	r23
    1234:	61 95       	neg	r22
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8f 4f       	sbci	r24, 0xFF	; 255
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	08 95       	ret

0000123e <__muluhisi3>:
    123e:	64 df       	rcall	.-312    	; 0x1108 <__umulhisi3>
    1240:	a5 9f       	mul	r26, r21
    1242:	90 0d       	add	r25, r0
    1244:	b4 9f       	mul	r27, r20
    1246:	90 0d       	add	r25, r0
    1248:	a4 9f       	mul	r26, r20
    124a:	80 0d       	add	r24, r0
    124c:	91 1d       	adc	r25, r1
    124e:	11 24       	eor	r1, r1
    1250:	08 95       	ret

00001252 <__mulshisi3>:
    1252:	b7 ff       	sbrs	r27, 7
    1254:	f4 cf       	rjmp	.-24     	; 0x123e <__muluhisi3>

00001256 <__mulohisi3>:
    1256:	f3 df       	rcall	.-26     	; 0x123e <__muluhisi3>
    1258:	82 1b       	sub	r24, r18
    125a:	93 0b       	sbc	r25, r19
    125c:	08 95       	ret

0000125e <__udivmodsi4>:
    125e:	a1 e2       	ldi	r26, 0x21	; 33
    1260:	1a 2e       	mov	r1, r26
    1262:	aa 1b       	sub	r26, r26
    1264:	bb 1b       	sub	r27, r27
    1266:	fd 01       	movw	r30, r26
    1268:	0d c0       	rjmp	.+26     	; 0x1284 <__udivmodsi4_ep>

0000126a <__udivmodsi4_loop>:
    126a:	aa 1f       	adc	r26, r26
    126c:	bb 1f       	adc	r27, r27
    126e:	ee 1f       	adc	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	a2 17       	cp	r26, r18
    1274:	b3 07       	cpc	r27, r19
    1276:	e4 07       	cpc	r30, r20
    1278:	f5 07       	cpc	r31, r21
    127a:	20 f0       	brcs	.+8      	; 0x1284 <__udivmodsi4_ep>
    127c:	a2 1b       	sub	r26, r18
    127e:	b3 0b       	sbc	r27, r19
    1280:	e4 0b       	sbc	r30, r20
    1282:	f5 0b       	sbc	r31, r21

00001284 <__udivmodsi4_ep>:
    1284:	66 1f       	adc	r22, r22
    1286:	77 1f       	adc	r23, r23
    1288:	88 1f       	adc	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	1a 94       	dec	r1
    128e:	69 f7       	brne	.-38     	; 0x126a <__udivmodsi4_loop>
    1290:	60 95       	com	r22
    1292:	70 95       	com	r23
    1294:	80 95       	com	r24
    1296:	90 95       	com	r25
    1298:	9b 01       	movw	r18, r22
    129a:	ac 01       	movw	r20, r24
    129c:	bd 01       	movw	r22, r26
    129e:	cf 01       	movw	r24, r30
    12a0:	08 95       	ret

000012a2 <_exit>:
    12a2:	f8 94       	cli

000012a4 <__stop_program>:
    12a4:	ff cf       	rjmp	.-2      	; 0x12a4 <__stop_program>
